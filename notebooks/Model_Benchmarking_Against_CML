{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Code source: Gaël Varoquaux\n",
    "#              Andreas Müller\n",
    "# Modified for documentation by Jaques Grobler\n",
    "# License: BSD 3 clause\n",
    "\n",
    "# basic tools\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.colors import ListedColormap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "PATH = '/home/disk/orca/adaley17/MLGEO2024_TC_Tracks_Intensity/data/'\n",
    "bt_data = 'clean/cleaned_best_track_data.csv'\n",
    "ships_data = 'ai_ready/ai_ready_SHIPS_data.csv'\n",
    "PNG = '/home/disk/orca/adaley17/MLGEO2024_TC_Tracks_Intensity/figures/'\n",
    "\n",
    "df_SHIPS = pd.read_csv(os.path.join(PATH, ships_data))\n",
    "df_BT = pd.read_csv(os.path.join(PATH, bt_data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Original_Times</th>\n",
       "      <th>Code</th>\n",
       "      <th>Times</th>\n",
       "      <th>Daily_SST_Avg</th>\n",
       "      <th>Mid_Level_RH</th>\n",
       "      <th>Vert_Vel</th>\n",
       "      <th>Vshear</th>\n",
       "      <th>MSLP</th>\n",
       "      <th>Vmax</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>AL011982</td>\n",
       "      <td>-12.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>AL011982</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>AL011982</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.1</td>\n",
       "      <td>57.0</td>\n",
       "      <td>6.631183</td>\n",
       "      <td>15.227542</td>\n",
       "      <td>1005.0</td>\n",
       "      <td>10.28888</td>\n",
       "      <td>21.7</td>\n",
       "      <td>87.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>AL011982</td>\n",
       "      <td>6.0</td>\n",
       "      <td>27.8</td>\n",
       "      <td>53.0</td>\n",
       "      <td>3.966363</td>\n",
       "      <td>15.536209</td>\n",
       "      <td>1004.0</td>\n",
       "      <td>12.86110</td>\n",
       "      <td>22.2</td>\n",
       "      <td>86.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>AL011982</td>\n",
       "      <td>12.0</td>\n",
       "      <td>27.9</td>\n",
       "      <td>56.0</td>\n",
       "      <td>4.403641</td>\n",
       "      <td>15.330431</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>15.43332</td>\n",
       "      <td>22.6</td>\n",
       "      <td>85.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>318545</th>\n",
       "      <td>2022-11-11 12:00:00</td>\n",
       "      <td>AL172022</td>\n",
       "      <td>96.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>318546</th>\n",
       "      <td>2022-11-11 12:00:00</td>\n",
       "      <td>AL172022</td>\n",
       "      <td>102.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>318547</th>\n",
       "      <td>2022-11-11 12:00:00</td>\n",
       "      <td>AL172022</td>\n",
       "      <td>108.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>318548</th>\n",
       "      <td>2022-11-11 12:00:00</td>\n",
       "      <td>AL172022</td>\n",
       "      <td>114.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>318549</th>\n",
       "      <td>2022-11-11 12:00:00</td>\n",
       "      <td>AL172022</td>\n",
       "      <td>120.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>318550 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Original_Times      Code  Times  Daily_SST_Avg  Mid_Level_RH  \\\n",
       "0       1982-06-02 12:00:00  AL011982  -12.0            NaN           NaN   \n",
       "1       1982-06-02 12:00:00  AL011982   -6.0            NaN           NaN   \n",
       "2       1982-06-02 12:00:00  AL011982    0.0           27.1          57.0   \n",
       "3       1982-06-02 12:00:00  AL011982    6.0           27.8          53.0   \n",
       "4       1982-06-02 12:00:00  AL011982   12.0           27.9          56.0   \n",
       "...                     ...       ...    ...            ...           ...   \n",
       "318545  2022-11-11 12:00:00  AL172022   96.0            NaN           NaN   \n",
       "318546  2022-11-11 12:00:00  AL172022  102.0            NaN           NaN   \n",
       "318547  2022-11-11 12:00:00  AL172022  108.0            NaN           NaN   \n",
       "318548  2022-11-11 12:00:00  AL172022  114.0            NaN           NaN   \n",
       "318549  2022-11-11 12:00:00  AL172022  120.0            NaN           NaN   \n",
       "\n",
       "        Vert_Vel     Vshear    MSLP      Vmax  Latitude  Longitude  \n",
       "0            NaN        NaN     NaN       NaN       NaN        NaN  \n",
       "1            NaN        NaN     NaN       NaN       NaN        NaN  \n",
       "2       6.631183  15.227542  1005.0  10.28888      21.7       87.1  \n",
       "3       3.966363  15.536209  1004.0  12.86110      22.2       86.5  \n",
       "4       4.403641  15.330431  1003.0  15.43332      22.6       85.8  \n",
       "...          ...        ...     ...       ...       ...        ...  \n",
       "318545       NaN        NaN     NaN       NaN       NaN        NaN  \n",
       "318546       NaN        NaN     NaN       NaN       NaN        NaN  \n",
       "318547       NaN        NaN     NaN       NaN       NaN        NaN  \n",
       "318548       NaN        NaN     NaN       NaN       NaN        NaN  \n",
       "318549       NaN        NaN     NaN       NaN       NaN        NaN  \n",
       "\n",
       "[318550 rows x 11 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_SHIPS\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ISO_TIME</th>\n",
       "      <th>USA_ATCF_ID</th>\n",
       "      <th>NAME</th>\n",
       "      <th>DIST2LAND</th>\n",
       "      <th>LANDFALL</th>\n",
       "      <th>STORM_SPEED</th>\n",
       "      <th>STORM_DIR</th>\n",
       "      <th>USA_LAT</th>\n",
       "      <th>USA_LON</th>\n",
       "      <th>USA_WIND</th>\n",
       "      <th>WMO_WIND</th>\n",
       "      <th>WMO_PRES</th>\n",
       "      <th>USA_PRES</th>\n",
       "      <th>USA_RMW</th>\n",
       "      <th>USA_WSPD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>AL011982</td>\n",
       "      <td>ALBERTO</td>\n",
       "      <td>22</td>\n",
       "      <td>40744.0</td>\n",
       "      <td>3.601108</td>\n",
       "      <td>47</td>\n",
       "      <td>21.7000</td>\n",
       "      <td>-87.1000</td>\n",
       "      <td>10.288880</td>\n",
       "      <td>10.28888</td>\n",
       "      <td>1005</td>\n",
       "      <td>1005.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.288880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1982-06-02 15:00:00</td>\n",
       "      <td>AL011982</td>\n",
       "      <td>ALBERTO</td>\n",
       "      <td>59</td>\n",
       "      <td>109268.0</td>\n",
       "      <td>4.115552</td>\n",
       "      <td>48</td>\n",
       "      <td>21.9551</td>\n",
       "      <td>-86.8077</td>\n",
       "      <td>11.317768</td>\n",
       "      <td>NaN</td>\n",
       "      <td></td>\n",
       "      <td>1004.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.317768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1982-06-02 18:00:00</td>\n",
       "      <td>AL011982</td>\n",
       "      <td>ALBERTO</td>\n",
       "      <td>93</td>\n",
       "      <td>172236.0</td>\n",
       "      <td>4.115552</td>\n",
       "      <td>52</td>\n",
       "      <td>22.2000</td>\n",
       "      <td>-86.5000</td>\n",
       "      <td>12.861100</td>\n",
       "      <td>12.86110</td>\n",
       "      <td>1004</td>\n",
       "      <td>1004.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.861100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1982-06-02 21:00:00</td>\n",
       "      <td>AL011982</td>\n",
       "      <td>ALBERTO</td>\n",
       "      <td>130</td>\n",
       "      <td>209276.0</td>\n",
       "      <td>4.115552</td>\n",
       "      <td>58</td>\n",
       "      <td>22.4224</td>\n",
       "      <td>-86.1650</td>\n",
       "      <td>13.889988</td>\n",
       "      <td>NaN</td>\n",
       "      <td></td>\n",
       "      <td>1003.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13.889988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1982-06-03 00:00:00</td>\n",
       "      <td>AL011982</td>\n",
       "      <td>ALBERTO</td>\n",
       "      <td>113</td>\n",
       "      <td>181496.0</td>\n",
       "      <td>4.115552</td>\n",
       "      <td>68</td>\n",
       "      <td>22.6000</td>\n",
       "      <td>-85.8000</td>\n",
       "      <td>15.433320</td>\n",
       "      <td>15.43332</td>\n",
       "      <td>1003</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15.433320</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              ISO_TIME USA_ATCF_ID     NAME  DIST2LAND  LANDFALL  STORM_SPEED  \\\n",
       "0  1982-06-02 12:00:00    AL011982  ALBERTO         22   40744.0     3.601108   \n",
       "1  1982-06-02 15:00:00    AL011982  ALBERTO         59  109268.0     4.115552   \n",
       "2  1982-06-02 18:00:00    AL011982  ALBERTO         93  172236.0     4.115552   \n",
       "3  1982-06-02 21:00:00    AL011982  ALBERTO        130  209276.0     4.115552   \n",
       "4  1982-06-03 00:00:00    AL011982  ALBERTO        113  181496.0     4.115552   \n",
       "\n",
       "   STORM_DIR  USA_LAT  USA_LON   USA_WIND  WMO_WIND WMO_PRES  USA_PRES  \\\n",
       "0         47  21.7000 -87.1000  10.288880  10.28888     1005    1005.0   \n",
       "1         48  21.9551 -86.8077  11.317768       NaN             1004.0   \n",
       "2         52  22.2000 -86.5000  12.861100  12.86110     1004    1004.0   \n",
       "3         58  22.4224 -86.1650  13.889988       NaN             1003.0   \n",
       "4         68  22.6000 -85.8000  15.433320  15.43332     1003    1003.0   \n",
       "\n",
       "   USA_RMW   USA_WSPD  \n",
       "0      NaN  10.288880  \n",
       "1      NaN  11.317768  \n",
       "2      NaN  12.861100  \n",
       "3      NaN  13.889988  \n",
       "4      NaN  15.433320  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_BT.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cleaning Up Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Subsetting the first 30 hours of BT and SHIPS Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Subsampling the data so that we only have the first 24 hours of each storm\n",
    "df_BT_24 = df_BT.groupby('USA_ATCF_ID').head(30) #This will be our Obseravtion data\n",
    "\n",
    "\n",
    "# Filter the DataFrame for Times from 0 to 24 for each Code\n",
    "filtered_df = df_SHIPS[(df_SHIPS['Times'] >= 0) & (df_SHIPS['Times'] <= 30)]\n",
    "\n",
    "# Group by Code and extract the relevant columns\n",
    "df_SHIPS_24 = filtered_df.groupby('Code').apply(lambda x: x[['Original_Times', 'Code', 'Times', 'Latitude', 'Longitude', 'Vmax', 'MSLP', 'Daily_SST_Avg', 'Mid_Level_RH', 'Vshear', 'Vert_Vel']]).reset_index(drop=True)\n",
    "\n",
    "# df_SHIPS_24\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Identifying common codes across datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Common IDs: 539\n",
      "IDs only in df_BT_24: 23\n",
      "IDs only in df_SHIPS_24: 71\n"
     ]
    }
   ],
   "source": [
    "# Set 'Code' as an index level in df_SHIPS_24\n",
    "df_SHIPS_24 = df_SHIPS_24.set_index('Code')\n",
    "\n",
    "# Extract the unique IDs from both dataframes\n",
    "bt_ids = df_BT_24['USA_ATCF_ID'].unique()\n",
    "ships_ids = df_SHIPS_24.index.get_level_values('Code').unique()\n",
    "\n",
    "# Find common IDs\n",
    "common_ids = np.intersect1d(bt_ids, ships_ids)\n",
    "\n",
    "# Find IDs only in df_BT_24\n",
    "bt_only_ids = np.setdiff1d(bt_ids, ships_ids)\n",
    "\n",
    "# Find IDs only in df_SHIPS_24\n",
    "ships_only_ids = np.setdiff1d(ships_ids, bt_ids)\n",
    "\n",
    "print(f\"Common IDs: {len(common_ids)}\")\n",
    "print(f\"IDs only in df_BT_24: {len(bt_only_ids)}\")\n",
    "print(f\"IDs only in df_SHIPS_24: {len(ships_only_ids)}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Keeping Common IDs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Length of df_BT_24_common: 15287\n",
      "Length of df_SHIPS_24_common: 79440\n"
     ]
    }
   ],
   "source": [
    "# Filter df_BT_24 to keep only common IDs\n",
    "df_BT_24_common = df_BT_24[df_BT_24['USA_ATCF_ID'].isin(common_ids)]\n",
    "\n",
    "# Filter df_SHIPS_24 to keep only common IDs\n",
    "df_SHIPS_24_common = df_SHIPS_24[df_SHIPS_24.index.get_level_values('Code').isin(common_ids)]\n",
    "\n",
    "# Check if the lengths of the filtered dataframes are the same\n",
    "print(f\"Length of df_BT_24_common: {len(df_BT_24_common)}\")\n",
    "print(f\"Length of df_SHIPS_24_common: {len(df_SHIPS_24_common)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Matching Times"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-8-a5379391ebe0>:10: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_SHIPS_24_common.loc[:, 'New_Times'] = new_times #Add the new times to the DataFrame\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Original_Times</th>\n",
       "      <th>Times</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Vmax</th>\n",
       "      <th>MSLP</th>\n",
       "      <th>Daily_SST_Avg</th>\n",
       "      <th>Mid_Level_RH</th>\n",
       "      <th>Vshear</th>\n",
       "      <th>Vert_Vel</th>\n",
       "      <th>New_Times</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.7</td>\n",
       "      <td>87.1</td>\n",
       "      <td>10.28888</td>\n",
       "      <td>1005.0</td>\n",
       "      <td>27.1</td>\n",
       "      <td>57.0</td>\n",
       "      <td>15.227542</td>\n",
       "      <td>6.631183</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>22.2</td>\n",
       "      <td>86.5</td>\n",
       "      <td>12.86110</td>\n",
       "      <td>1004.0</td>\n",
       "      <td>27.8</td>\n",
       "      <td>53.0</td>\n",
       "      <td>15.536209</td>\n",
       "      <td>3.966363</td>\n",
       "      <td>1982-06-02 18:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>12.0</td>\n",
       "      <td>22.6</td>\n",
       "      <td>85.8</td>\n",
       "      <td>15.43332</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>27.9</td>\n",
       "      <td>56.0</td>\n",
       "      <td>15.330431</td>\n",
       "      <td>4.403641</td>\n",
       "      <td>1982-06-03 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.8</td>\n",
       "      <td>85.0</td>\n",
       "      <td>20.57776</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>27.2</td>\n",
       "      <td>59.0</td>\n",
       "      <td>18.622873</td>\n",
       "      <td>5.375940</td>\n",
       "      <td>1982-06-03 06:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>24.0</td>\n",
       "      <td>23.2</td>\n",
       "      <td>84.2</td>\n",
       "      <td>25.72220</td>\n",
       "      <td>995.0</td>\n",
       "      <td>26.7</td>\n",
       "      <td>53.0</td>\n",
       "      <td>17.491096</td>\n",
       "      <td>4.156708</td>\n",
       "      <td>1982-06-03 12:00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Original_Times  Times  Latitude  Longitude      Vmax    MSLP  \\\n",
       "Code                                                                          \n",
       "AL011982  1982-06-02 12:00:00    0.0      21.7       87.1  10.28888  1005.0   \n",
       "AL011982  1982-06-02 12:00:00    6.0      22.2       86.5  12.86110  1004.0   \n",
       "AL011982  1982-06-02 12:00:00   12.0      22.6       85.8  15.43332  1003.0   \n",
       "AL011982  1982-06-02 12:00:00   18.0      22.8       85.0  20.57776  1001.0   \n",
       "AL011982  1982-06-02 12:00:00   24.0      23.2       84.2  25.72220   995.0   \n",
       "\n",
       "          Daily_SST_Avg  Mid_Level_RH     Vshear  Vert_Vel           New_Times  \n",
       "Code                                                                            \n",
       "AL011982           27.1          57.0  15.227542  6.631183 1982-06-02 12:00:00  \n",
       "AL011982           27.8          53.0  15.536209  3.966363 1982-06-02 18:00:00  \n",
       "AL011982           27.9          56.0  15.330431  4.403641 1982-06-03 00:00:00  \n",
       "AL011982           27.2          59.0  18.622873  5.375940 1982-06-03 06:00:00  \n",
       "AL011982           26.7          53.0  17.491096  4.156708 1982-06-03 12:00:00  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_times = [None] * len(df_SHIPS_24_common['Original_Times']) #Empty list to store the new times\n",
    "for i in range(len(df_SHIPS_24_common['Original_Times'])):\n",
    "    \n",
    "    original_time = pd.to_datetime(df_SHIPS_24_common['Original_Times'].iloc[i]) #Time when prediction was made\n",
    "\n",
    "    # print(original_time, original_time + pd.Timedelta(hours=df_SHIPS_24_common['Times'].iloc[i]))\n",
    "    new_times[i] = original_time + pd.Timedelta(hours=df_SHIPS_24_common['Times'].iloc[i]) #Add the time of prediction to the time when prediction was made\n",
    "\n",
    "    \n",
    "df_SHIPS_24_common.loc[:, 'New_Times'] = new_times #Add the new times to the DataFrame\n",
    "df_SHIPS_24_common.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-9-7888a354acea>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_BT_24_common['ISO_TIME'] = pd.to_datetime(df_BT_24_common['ISO_TIME'])\n"
     ]
    }
   ],
   "source": [
    "df_SHIPS_24_common\n",
    "\n",
    "# Convert ISO_TIME to datetime format\n",
    "df_BT_24_common['ISO_TIME'] = pd.to_datetime(df_BT_24_common['ISO_TIME'])\n",
    "\n",
    "# df_merged = pd.merge(df_SHIPS_24_common.reset_index(), \n",
    "# df_BT_24_common[['ISO_TIME', 'USA_ATCF_ID', 'USA_WSPD', 'USA_PRES', \n",
    "#                     'WMO_WIND', 'USA_WIND', 'STORM_DIR', 'WMO_PRES']], \n",
    "#             how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Original_Times</th>\n",
       "      <th>Times</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Vmax</th>\n",
       "      <th>MSLP</th>\n",
       "      <th>Daily_SST_Avg</th>\n",
       "      <th>Mid_Level_RH</th>\n",
       "      <th>Vshear</th>\n",
       "      <th>Vert_Vel</th>\n",
       "      <th>New_Times</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.7</td>\n",
       "      <td>87.1</td>\n",
       "      <td>10.28888</td>\n",
       "      <td>1005.0</td>\n",
       "      <td>27.1</td>\n",
       "      <td>57.0</td>\n",
       "      <td>15.227542</td>\n",
       "      <td>6.631183</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>22.2</td>\n",
       "      <td>86.5</td>\n",
       "      <td>12.86110</td>\n",
       "      <td>1004.0</td>\n",
       "      <td>27.8</td>\n",
       "      <td>53.0</td>\n",
       "      <td>15.536209</td>\n",
       "      <td>3.966363</td>\n",
       "      <td>1982-06-02 18:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>12.0</td>\n",
       "      <td>22.6</td>\n",
       "      <td>85.8</td>\n",
       "      <td>15.43332</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>27.9</td>\n",
       "      <td>56.0</td>\n",
       "      <td>15.330431</td>\n",
       "      <td>4.403641</td>\n",
       "      <td>1982-06-03 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.8</td>\n",
       "      <td>85.0</td>\n",
       "      <td>20.57776</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>27.2</td>\n",
       "      <td>59.0</td>\n",
       "      <td>18.622873</td>\n",
       "      <td>5.375940</td>\n",
       "      <td>1982-06-03 06:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>24.0</td>\n",
       "      <td>23.2</td>\n",
       "      <td>84.2</td>\n",
       "      <td>25.72220</td>\n",
       "      <td>995.0</td>\n",
       "      <td>26.7</td>\n",
       "      <td>53.0</td>\n",
       "      <td>17.491096</td>\n",
       "      <td>4.156708</td>\n",
       "      <td>1982-06-03 12:00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Original_Times  Times  Latitude  Longitude      Vmax    MSLP  \\\n",
       "Code                                                                          \n",
       "AL011982  1982-06-02 12:00:00    0.0      21.7       87.1  10.28888  1005.0   \n",
       "AL011982  1982-06-02 12:00:00    6.0      22.2       86.5  12.86110  1004.0   \n",
       "AL011982  1982-06-02 12:00:00   12.0      22.6       85.8  15.43332  1003.0   \n",
       "AL011982  1982-06-02 12:00:00   18.0      22.8       85.0  20.57776  1001.0   \n",
       "AL011982  1982-06-02 12:00:00   24.0      23.2       84.2  25.72220   995.0   \n",
       "\n",
       "          Daily_SST_Avg  Mid_Level_RH     Vshear  Vert_Vel           New_Times  \n",
       "Code                                                                            \n",
       "AL011982           27.1          57.0  15.227542  6.631183 1982-06-02 12:00:00  \n",
       "AL011982           27.8          53.0  15.536209  3.966363 1982-06-02 18:00:00  \n",
       "AL011982           27.9          56.0  15.330431  4.403641 1982-06-03 00:00:00  \n",
       "AL011982           27.2          59.0  18.622873  5.375940 1982-06-03 06:00:00  \n",
       "AL011982           26.7          53.0  17.491096  4.156708 1982-06-03 12:00:00  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove rows with NaNs in the Vmax column\n",
    "df_SHIPS_24_common_clean = df_SHIPS_24_common.dropna(subset=['Vmax'])\n",
    "\n",
    "# Display the cleaned DataFrame\n",
    "df_SHIPS_24_common_clean.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Intensity Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Original_Times</th>\n",
       "      <th>Times</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Vmax</th>\n",
       "      <th>MSLP</th>\n",
       "      <th>Daily_SST_Avg</th>\n",
       "      <th>Mid_Level_RH</th>\n",
       "      <th>Vshear</th>\n",
       "      <th>Vert_Vel</th>\n",
       "      <th>New_Times</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.7</td>\n",
       "      <td>87.1</td>\n",
       "      <td>10.28888</td>\n",
       "      <td>1005.0</td>\n",
       "      <td>27.1</td>\n",
       "      <td>57.0</td>\n",
       "      <td>15.227542</td>\n",
       "      <td>6.631183</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>22.2</td>\n",
       "      <td>86.5</td>\n",
       "      <td>12.86110</td>\n",
       "      <td>1004.0</td>\n",
       "      <td>27.8</td>\n",
       "      <td>53.0</td>\n",
       "      <td>15.536209</td>\n",
       "      <td>3.966363</td>\n",
       "      <td>1982-06-02 18:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>12.0</td>\n",
       "      <td>22.6</td>\n",
       "      <td>85.8</td>\n",
       "      <td>15.43332</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>27.9</td>\n",
       "      <td>56.0</td>\n",
       "      <td>15.330431</td>\n",
       "      <td>4.403641</td>\n",
       "      <td>1982-06-03 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.8</td>\n",
       "      <td>85.0</td>\n",
       "      <td>20.57776</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>27.2</td>\n",
       "      <td>59.0</td>\n",
       "      <td>18.622873</td>\n",
       "      <td>5.375940</td>\n",
       "      <td>1982-06-03 06:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>24.0</td>\n",
       "      <td>23.2</td>\n",
       "      <td>84.2</td>\n",
       "      <td>25.72220</td>\n",
       "      <td>995.0</td>\n",
       "      <td>26.7</td>\n",
       "      <td>53.0</td>\n",
       "      <td>17.491096</td>\n",
       "      <td>4.156708</td>\n",
       "      <td>1982-06-03 12:00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Original_Times  Times  Latitude  Longitude      Vmax    MSLP  \\\n",
       "Code                                                                          \n",
       "AL011982  1982-06-02 12:00:00    0.0      21.7       87.1  10.28888  1005.0   \n",
       "AL011982  1982-06-02 12:00:00    6.0      22.2       86.5  12.86110  1004.0   \n",
       "AL011982  1982-06-02 12:00:00   12.0      22.6       85.8  15.43332  1003.0   \n",
       "AL011982  1982-06-02 12:00:00   18.0      22.8       85.0  20.57776  1001.0   \n",
       "AL011982  1982-06-02 12:00:00   24.0      23.2       84.2  25.72220   995.0   \n",
       "\n",
       "          Daily_SST_Avg  Mid_Level_RH     Vshear  Vert_Vel           New_Times  \n",
       "Code                                                                            \n",
       "AL011982           27.1          57.0  15.227542  6.631183 1982-06-02 12:00:00  \n",
       "AL011982           27.8          53.0  15.536209  3.966363 1982-06-02 18:00:00  \n",
       "AL011982           27.9          56.0  15.330431  4.403641 1982-06-03 00:00:00  \n",
       "AL011982           27.2          59.0  18.622873  5.375940 1982-06-03 06:00:00  \n",
       "AL011982           26.7          53.0  17.491096  4.156708 1982-06-03 12:00:00  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_intensity = df_SHIPS_24_common_clean.copy()\n",
    "df_intensity.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Encoding the Codes assigned to each storm\n",
    "\n",
    "Each storm is assigned a code based on the basin where it occurs, name and year when it happened. The code is represented as a string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code</th>\n",
       "      <th>Original_Times</th>\n",
       "      <th>Times</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Vmax</th>\n",
       "      <th>MSLP</th>\n",
       "      <th>Daily_SST_Avg</th>\n",
       "      <th>Mid_Level_RH</th>\n",
       "      <th>Vshear</th>\n",
       "      <th>Vert_Vel</th>\n",
       "      <th>New_Times</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.7</td>\n",
       "      <td>87.1</td>\n",
       "      <td>10.28888</td>\n",
       "      <td>1005.0</td>\n",
       "      <td>27.1</td>\n",
       "      <td>57.0</td>\n",
       "      <td>15.227542</td>\n",
       "      <td>6.631183</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>22.2</td>\n",
       "      <td>86.5</td>\n",
       "      <td>12.86110</td>\n",
       "      <td>1004.0</td>\n",
       "      <td>27.8</td>\n",
       "      <td>53.0</td>\n",
       "      <td>15.536209</td>\n",
       "      <td>3.966363</td>\n",
       "      <td>1982-06-02 18:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>12.0</td>\n",
       "      <td>22.6</td>\n",
       "      <td>85.8</td>\n",
       "      <td>15.43332</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>27.9</td>\n",
       "      <td>56.0</td>\n",
       "      <td>15.330431</td>\n",
       "      <td>4.403641</td>\n",
       "      <td>1982-06-03 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.8</td>\n",
       "      <td>85.0</td>\n",
       "      <td>20.57776</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>27.2</td>\n",
       "      <td>59.0</td>\n",
       "      <td>18.622873</td>\n",
       "      <td>5.375940</td>\n",
       "      <td>1982-06-03 06:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>24.0</td>\n",
       "      <td>23.2</td>\n",
       "      <td>84.2</td>\n",
       "      <td>25.72220</td>\n",
       "      <td>995.0</td>\n",
       "      <td>26.7</td>\n",
       "      <td>53.0</td>\n",
       "      <td>17.491096</td>\n",
       "      <td>4.156708</td>\n",
       "      <td>1982-06-03 12:00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Code       Original_Times  Times  Latitude  Longitude      Vmax    MSLP  \\\n",
       "0     0  1982-06-02 12:00:00    0.0      21.7       87.1  10.28888  1005.0   \n",
       "1     0  1982-06-02 12:00:00    6.0      22.2       86.5  12.86110  1004.0   \n",
       "2     0  1982-06-02 12:00:00   12.0      22.6       85.8  15.43332  1003.0   \n",
       "3     0  1982-06-02 12:00:00   18.0      22.8       85.0  20.57776  1001.0   \n",
       "4     0  1982-06-02 12:00:00   24.0      23.2       84.2  25.72220   995.0   \n",
       "\n",
       "   Daily_SST_Avg  Mid_Level_RH     Vshear  Vert_Vel           New_Times  \n",
       "0           27.1          57.0  15.227542  6.631183 1982-06-02 12:00:00  \n",
       "1           27.8          53.0  15.536209  3.966363 1982-06-02 18:00:00  \n",
       "2           27.9          56.0  15.330431  4.403641 1982-06-03 00:00:00  \n",
       "3           27.2          59.0  18.622873  5.375940 1982-06-03 06:00:00  \n",
       "4           26.7          53.0  17.491096  4.156708 1982-06-03 12:00:00  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "\n",
    "df_intensity_clean = df_intensity.reset_index()\n",
    "df_intensity_clean['Code'] = LabelEncoder().fit(df_intensity_clean['Code']).transform(df_intensity_clean['Code']) # Extract the TC_codes\n",
    "df_intensity_clean.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding storm direction to the dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code</th>\n",
       "      <th>Original_Times</th>\n",
       "      <th>Times</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Vmax</th>\n",
       "      <th>MSLP</th>\n",
       "      <th>Daily_SST_Avg</th>\n",
       "      <th>Mid_Level_RH</th>\n",
       "      <th>Vshear</th>\n",
       "      <th>Vert_Vel</th>\n",
       "      <th>New_Times</th>\n",
       "      <th>Storm_Dir</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>83279</th>\n",
       "      <td>485</td>\n",
       "      <td>2022-11-09 06:00:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>26.5</td>\n",
       "      <td>76.2</td>\n",
       "      <td>28.29442</td>\n",
       "      <td>985.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>17.336763</td>\n",
       "      <td>6.281361</td>\n",
       "      <td>2022-11-09 12:00:00</td>\n",
       "      <td>262.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83280</th>\n",
       "      <td>485</td>\n",
       "      <td>2022-11-09 06:00:00</td>\n",
       "      <td>12.0</td>\n",
       "      <td>26.5</td>\n",
       "      <td>77.3</td>\n",
       "      <td>30.86664</td>\n",
       "      <td>985.0</td>\n",
       "      <td>27.5</td>\n",
       "      <td>49.0</td>\n",
       "      <td>18.571428</td>\n",
       "      <td>5.730906</td>\n",
       "      <td>2022-11-09 18:00:00</td>\n",
       "      <td>270.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83284</th>\n",
       "      <td>485</td>\n",
       "      <td>2022-11-09 12:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.5</td>\n",
       "      <td>76.2</td>\n",
       "      <td>28.29442</td>\n",
       "      <td>985.0</td>\n",
       "      <td>28.0</td>\n",
       "      <td>48.0</td>\n",
       "      <td>17.336763</td>\n",
       "      <td>6.281361</td>\n",
       "      <td>2022-11-09 12:00:00</td>\n",
       "      <td>262.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83285</th>\n",
       "      <td>485</td>\n",
       "      <td>2022-11-09 12:00:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>26.5</td>\n",
       "      <td>77.3</td>\n",
       "      <td>30.86664</td>\n",
       "      <td>985.0</td>\n",
       "      <td>27.5</td>\n",
       "      <td>49.0</td>\n",
       "      <td>18.571428</td>\n",
       "      <td>5.730906</td>\n",
       "      <td>2022-11-09 18:00:00</td>\n",
       "      <td>270.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83290</th>\n",
       "      <td>485</td>\n",
       "      <td>2022-11-09 18:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.5</td>\n",
       "      <td>77.3</td>\n",
       "      <td>30.86664</td>\n",
       "      <td>985.0</td>\n",
       "      <td>27.5</td>\n",
       "      <td>49.0</td>\n",
       "      <td>18.571428</td>\n",
       "      <td>5.730906</td>\n",
       "      <td>2022-11-09 18:00:00</td>\n",
       "      <td>270.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Code       Original_Times  Times  Latitude  Longitude      Vmax   MSLP  \\\n",
       "83279   485  2022-11-09 06:00:00    6.0      26.5       76.2  28.29442  985.0   \n",
       "83280   485  2022-11-09 06:00:00   12.0      26.5       77.3  30.86664  985.0   \n",
       "83284   485  2022-11-09 12:00:00    0.0      26.5       76.2  28.29442  985.0   \n",
       "83285   485  2022-11-09 12:00:00    6.0      26.5       77.3  30.86664  985.0   \n",
       "83290   485  2022-11-09 18:00:00    0.0      26.5       77.3  30.86664  985.0   \n",
       "\n",
       "       Daily_SST_Avg  Mid_Level_RH     Vshear  Vert_Vel           New_Times  \\\n",
       "83279           28.0          48.0  17.336763  6.281361 2022-11-09 12:00:00   \n",
       "83280           27.5          49.0  18.571428  5.730906 2022-11-09 18:00:00   \n",
       "83284           28.0          48.0  17.336763  6.281361 2022-11-09 12:00:00   \n",
       "83285           27.5          49.0  18.571428  5.730906 2022-11-09 18:00:00   \n",
       "83290           27.5          49.0  18.571428  5.730906 2022-11-09 18:00:00   \n",
       "\n",
       "       Storm_Dir  \n",
       "83279      262.0  \n",
       "83280      270.0  \n",
       "83284      262.0  \n",
       "83285      270.0  \n",
       "83290      270.0  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Merge df_intensity_clean with df_BT_24_common on the respective times\n",
    "df_intensity_clean = pd.merge(df_intensity_clean, df_BT_24_common[['ISO_TIME', 'STORM_DIR']], left_on='New_Times', right_on='ISO_TIME', how='left')\n",
    "\n",
    "# Rename the STORM_DIR column to Storm_Dir\n",
    "df_intensity_clean.rename(columns={'STORM_DIR': 'Storm_Dir'}, inplace=True)\n",
    "\n",
    "# Drop the ISO_TIME column as it is no longer needed\n",
    "df_intensity_clean.drop(columns=['ISO_TIME'], inplace=True)\n",
    "\n",
    "#Removing Nan values\n",
    "df_intensity_clean = df_intensity_clean.dropna()\n",
    "df_intensity_clean.shape\n",
    "\n",
    "# Display the updated dataframe\n",
    "df_intensity_clean.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Splitting the Data into Training and Test\n",
    "\n",
    "We perform this split in a manner which maintains the codes across each both data sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_df shape: (42951, 13)\n",
      "test_df shape: (12455, 13)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Split the data into training and test sets while ensuring the 'Code' column is consistent across the split\n",
    "train_codes, test_codes = train_test_split(df_intensity_clean['Code'].unique(), test_size=0.2, random_state=42)\n",
    "\n",
    "# Create training and test sets based on the split codes\n",
    "train_df = df_intensity_clean[df_intensity_clean['Code'].isin(train_codes)]\n",
    "test_df = df_intensity_clean[df_intensity_clean['Code'].isin(test_codes)]\n",
    "\n",
    "# Print the shapes of the resulting DataFrames\n",
    "print(f\"train_df shape: {train_df.shape}\")\n",
    "print(f\"test_df shape: {test_df.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code</th>\n",
       "      <th>Original_Times</th>\n",
       "      <th>Times</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Vmax</th>\n",
       "      <th>MSLP</th>\n",
       "      <th>Daily_SST_Avg</th>\n",
       "      <th>Mid_Level_RH</th>\n",
       "      <th>Vshear</th>\n",
       "      <th>Vert_Vel</th>\n",
       "      <th>New_Times</th>\n",
       "      <th>Storm_Dir</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>59</td>\n",
       "      <td>1982-08-28 12:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.7</td>\n",
       "      <td>22.2</td>\n",
       "      <td>15.43332</td>\n",
       "      <td>1008.0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>75.0</td>\n",
       "      <td>11.420657</td>\n",
       "      <td>4.521963</td>\n",
       "      <td>1982-08-28 12:00:00</td>\n",
       "      <td>296.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>59</td>\n",
       "      <td>1982-08-28 12:00:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>13.9</td>\n",
       "      <td>22.7</td>\n",
       "      <td>18.00554</td>\n",
       "      <td>1006.0</td>\n",
       "      <td>26.8</td>\n",
       "      <td>76.0</td>\n",
       "      <td>10.957657</td>\n",
       "      <td>4.203007</td>\n",
       "      <td>1982-08-28 18:00:00</td>\n",
       "      <td>285.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>59</td>\n",
       "      <td>1982-08-28 12:00:00</td>\n",
       "      <td>12.0</td>\n",
       "      <td>14.1</td>\n",
       "      <td>23.6</td>\n",
       "      <td>18.00554</td>\n",
       "      <td>1005.0</td>\n",
       "      <td>27.9</td>\n",
       "      <td>75.0</td>\n",
       "      <td>10.854768</td>\n",
       "      <td>4.007519</td>\n",
       "      <td>1982-08-29 00:00:00</td>\n",
       "      <td>285.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>59</td>\n",
       "      <td>1982-08-28 12:00:00</td>\n",
       "      <td>18.0</td>\n",
       "      <td>14.5</td>\n",
       "      <td>24.9</td>\n",
       "      <td>20.57776</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>26.4</td>\n",
       "      <td>74.0</td>\n",
       "      <td>11.060546</td>\n",
       "      <td>3.950930</td>\n",
       "      <td>1982-08-29 06:00:00</td>\n",
       "      <td>287.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>59</td>\n",
       "      <td>1982-08-28 12:00:00</td>\n",
       "      <td>24.0</td>\n",
       "      <td>14.9</td>\n",
       "      <td>26.3</td>\n",
       "      <td>23.14998</td>\n",
       "      <td>1002.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>9.620103</td>\n",
       "      <td>3.333597</td>\n",
       "      <td>1982-08-29 12:00:00</td>\n",
       "      <td>286.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Code       Original_Times  Times  Latitude  Longitude      Vmax    MSLP  \\\n",
       "87    59  1982-08-28 12:00:00    0.0      13.7       22.2  15.43332  1008.0   \n",
       "88    59  1982-08-28 12:00:00    6.0      13.9       22.7  18.00554  1006.0   \n",
       "89    59  1982-08-28 12:00:00   12.0      14.1       23.6  18.00554  1005.0   \n",
       "90    59  1982-08-28 12:00:00   18.0      14.5       24.9  20.57776  1003.0   \n",
       "91    59  1982-08-28 12:00:00   24.0      14.9       26.3  23.14998  1002.0   \n",
       "\n",
       "    Daily_SST_Avg  Mid_Level_RH     Vshear  Vert_Vel           New_Times  \\\n",
       "87           26.6          75.0  11.420657  4.521963 1982-08-28 12:00:00   \n",
       "88           26.8          76.0  10.957657  4.203007 1982-08-28 18:00:00   \n",
       "89           27.9          75.0  10.854768  4.007519 1982-08-29 00:00:00   \n",
       "90           26.4          74.0  11.060546  3.950930 1982-08-29 06:00:00   \n",
       "91           26.0          72.0   9.620103  3.333597 1982-08-29 12:00:00   \n",
       "\n",
       "    Storm_Dir  \n",
       "87      296.0  \n",
       "88      285.0  \n",
       "89      285.0  \n",
       "90      287.0  \n",
       "91      286.0  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Specifying data the Model should use"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Train data\n",
    "X_train = np.array(train_df.drop(columns=['Vmax', 'Original_Times', 'New_Times'])).astype(float) #Removing Variables\n",
    "y_train = np.array(train_df['Vmax']).astype(float) #Target Variable\n",
    "t_train = np.asarray(train_df['New_Times']) #Time Variable\n",
    "\n",
    "#Test data\n",
    "X_test = np.array(test_df.drop(columns=['Vmax', 'Original_Times', 'New_Times'])).astype(float) #Removing Variables\n",
    "y_test = np.array(test_df['Vmax']).astype(float) #Target Variable\n",
    "t_test = np.asarray(test_df['New_Times']) #Time Variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualizing the Training and Test Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Figure Settings\n",
    "fontsize=14\n",
    "\n",
    "#Plotting the Train Test Split\n",
    "gridsize = (1, 1)\n",
    "fig = plt.figure(figsize=(10,4))\n",
    "\n",
    "ax1 = plt.subplot2grid(gridsize, (0,0), colspan=1, rowspan=1)\n",
    "\n",
    "#Plotting the data\n",
    "ax1.scatter(t_train,y_train,marker=\"o\",s=10,c=\"blue\", zorder=100)\n",
    "ax1.scatter(t_test,y_test,marker=\"o\",s=25,c=\"red\")\n",
    "\n",
    "#Legend\n",
    "ax1.legend(['Training Data', 'Test Data'], loc='best', fontsize=fontsize)\n",
    "\n",
    "#Labels\n",
    "ax1.set_xlabel('Time (yyyy)', fontsize=fontsize)\n",
    "ax1.set_ylabel('Peak Wind Speed (m/s)', fontsize=fontsize)\n",
    "ax1.set_title('Train Test Split of Peak Wind Speed Data', fontsize=fontsize)\n",
    "ax1.tick_params(axis='x', labelsize=fontsize)\n",
    "ax1.tick_params(axis='y', labelsize=fontsize)\n",
    "\n",
    "#Grid\n",
    "ax1.grid(True, linestyle='--', linewidth=0.5)\n",
    "\n",
    "#Save the figure\n",
    "plt.savefig(PNG + 'train_test_split_intensity_model.png', dpi=300, bbox_inches='tight')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training and Testing the Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Testing a number of model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               Model  Training MSE   Test MSE  Training R^2  Test R^2\n",
      "0  Linear Regression  1.615460e+01  14.906718      0.896901  0.895358\n",
      "1   Ridge Regression  1.615460e+01  14.906716      0.896901  0.895358\n",
      "2   Lasso Regression  1.652120e+01  14.719032      0.894562  0.896676\n",
      "3      Decision Tree  5.868604e-28  22.056688      1.000000  0.845167\n",
      "4      Random Forest  1.252315e-02  13.429827      0.999920  0.905726\n",
      "5  Gradient Boosting  9.057100e+00  12.181573      0.942197  0.914488\n",
      "6        Extra Trees  1.749932e-05  11.848315      1.000000  0.916828\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression, Ridge, Lasso\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "import pandas as pd\n",
    "\n",
    "# Define the models to be tested\n",
    "models = {\n",
    "    'Linear Regression': LinearRegression(),\n",
    "    'Ridge Regression': Ridge(),\n",
    "    'Lasso Regression': Lasso(),\n",
    "    'Decision Tree': DecisionTreeRegressor(),\n",
    "    'Random Forest': RandomForestRegressor(),\n",
    "    'Gradient Boosting': GradientBoostingRegressor(),\n",
    "    'Extra Trees': ExtraTreesRegressor()\n",
    "}\n",
    "\n",
    "# Initialize a list to store the results\n",
    "results = []\n",
    "\n",
    "# Loop through each model, train it, and evaluate its performance\n",
    "for name, model in models.items():\n",
    "    # Train the model\n",
    "    model.fit(X_train, y_train)\n",
    "    \n",
    "    # Predict on the training and test sets\n",
    "    y_train_pred = model.predict(X_train)\n",
    "    y_test_pred = model.predict(X_test)\n",
    "    \n",
    "    # Calculate performance metrics\n",
    "    train_mse = mean_squared_error(y_train, y_train_pred)\n",
    "    test_mse = mean_squared_error(y_test, y_test_pred)\n",
    "    train_r2 = r2_score(y_train, y_train_pred)\n",
    "    test_r2 = r2_score(y_test, y_test_pred)\n",
    "    \n",
    "    # Store the results\n",
    "    results.append({\n",
    "        'Model': name,\n",
    "        'Training MSE': train_mse,\n",
    "        'Test MSE': test_mse,\n",
    "        'Training R^2': train_r2,\n",
    "        'Test R^2': test_r2\n",
    "    })\n",
    "\n",
    "# Convert the results to a DataFrame and print it\n",
    "results_df = pd.DataFrame(results)\n",
    "print(results_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training the Gradient Boost Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters found:  {'learning_rate': 0.1, 'max_depth': 3, 'min_samples_leaf': 1, 'min_samples_split': 5, 'n_estimators': 200}\n",
      "Training set: Coefficient of determination (R^2):  0.9515953115888189\n",
      "MSE (mean square error) on training set: 7.58\n",
      "Coefficient of determination on training set: 0.95\n",
      "Test set: Coefficient of determination (R^2):  0.9145372733182363\n",
      "MSE (mean square error) on test set: 12.17\n",
      "Coefficient of determination on test set: 0.91\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "# Define the parameter grid\n",
    "param_grid = {\n",
    "    'n_estimators': [100, 200, 300],\n",
    "    'learning_rate': [0.01, 0.1, 0.2],\n",
    "    'max_depth': [3, 4, 5],\n",
    "    'min_samples_split': [2, 5, 10],\n",
    "    'min_samples_leaf': [1, 2, 4]\n",
    "}\n",
    "\n",
    "# Initialize the model\n",
    "gbr = GradientBoostingRegressor()\n",
    "\n",
    "# Initialize GridSearchCV\n",
    "grid_search = GridSearchCV(estimator=gbr, param_grid=param_grid, cv=5, n_jobs=-1, scoring='r2')\n",
    "\n",
    "# Fit the model\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best parameters\n",
    "best_params_gbr = grid_search.best_params_\n",
    "print(\"Best parameters found: \", best_params_gbr)\n",
    "\n",
    "# Train the model with the best parameters\n",
    "best_gbr = GradientBoostingRegressor(**best_params_gbr)\n",
    "best_gbr.fit(X_train, y_train)\n",
    "\n",
    "# Predict and evaluate on the training data\n",
    "y_train_pred = best_gbr.predict(X_train)\n",
    "y_test_pred = best_gbr.predict(X_test)\n",
    "\n",
    "# Print the evaluation metrics\n",
    "print('Training set: Coefficient of determination (R^2): ', best_gbr.score(X_train, y_train))\n",
    "print('MSE (mean square error) on training set: %.2f' % mean_squared_error(y_train, y_train_pred))\n",
    "print('Coefficient of determination on training set: %.2f' % r2_score(y_train, y_train_pred))\n",
    "\n",
    "print('Test set: Coefficient of determination (R^2): ', best_gbr.score(X_test, y_test))\n",
    "print('MSE (mean square error) on test set: %.2f' % mean_squared_error(y_test, y_test_pred))\n",
    "print('Coefficient of determination on test set: %.2f' % r2_score(y_test, y_test_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/orca/adaley17/anaconda3/envs/waves/lib/python3.8/site-packages/sklearn/ensemble/_forest.py:416: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters found:  {'max_depth': 20, 'max_features': 'auto', 'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 200}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/orca/adaley17/anaconda3/envs/waves/lib/python3.8/site-packages/sklearn/ensemble/_forest.py:416: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set: Coefficient of determination (R^2):  0.9989947652217789\n",
      "MSE (mean square error) on training set: 0.16\n",
      "Coefficient of determination on training set: 1.00\n",
      "Test set: Coefficient of determination (R^2):  0.9183292239005535\n",
      "MSE (mean square error) on test set: 11.63\n",
      "Coefficient of determination on test set: 0.92\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "\n",
    "# Define the parameter grid\n",
    "param_grid = {\n",
    "    'n_estimators': [50, 100, 200],\n",
    "    'max_features': ['auto', 'sqrt', 'log2'],\n",
    "    'max_depth': [None, 10, 20, 30],\n",
    "    'min_samples_split': [2, 5, 10],\n",
    "    'min_samples_leaf': [1, 2, 4]\n",
    "}\n",
    "\n",
    "# Initialize the model\n",
    "regr = ExtraTreesRegressor()\n",
    "\n",
    "# Initialize GridSearchCV\n",
    "grid_search = GridSearchCV(estimator=regr, param_grid=param_grid, cv=5, n_jobs=-1, scoring='r2')\n",
    "\n",
    "# Fit the model\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best parameters\n",
    "best_params_int = grid_search.best_params_\n",
    "print(\"Best parameters found: \", best_params_int)\n",
    "\n",
    "# Train the model with the best parameters\n",
    "best_regr = ExtraTreesRegressor(**best_params_int)\n",
    "best_regr.fit(X_train, y_train)\n",
    "\n",
    "# Predict and evaluate on the training data\n",
    "y_train_pred = best_regr.predict(X_train)\n",
    "y_test_pred = best_regr.predict(X_test)\n",
    "\n",
    "# Print the evaluation metrics\n",
    "print('Training set: Coefficient of determination (R^2): ', best_regr.score(X_train, y_train))\n",
    "print('MSE (mean square error) on training set: %.2f' % mean_squared_error(y_train, y_train_pred))\n",
    "print('Coefficient of determination on training set: %.2f' % r2_score(y_train, y_train_pred))\n",
    "\n",
    "print('Test set: Coefficient of determination (R^2): ', best_regr.score(X_test, y_test))\n",
    "print('MSE (mean square error) on test set: %.2f' % mean_squared_error(y_test, y_test_pred))\n",
    "print('Coefficient of determination on test set: %.2f' % r2_score(y_test, y_test_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```markdown\n",
    "| Metric                                      | Training Set | Test Set |\n",
    "|---------------------------------------------|--------------|----------|\n",
    "| Coefficient of determination (R^2)          | 0.951        | 0.918    |\n",
    "| Mean Square Error (MSE)                     | 0.16         | 11.63   |\n",
    "| Coefficient of determination (R^2) (rounded)| 1.00         | 0.92     |\n",
    "```\n",
    "The results training is almost perfect with a very small MSE, however, the test set shows an increase in the $R^2$ and MSE. We still need to viualize the results to ensure it is doing what we expect. Also we need to perform a cross validation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize the Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10.28888, 12.8611 , 15.43332, ..., 28.29442, 30.86664, 30.86664])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Figure Settings\n",
    "fontsize=14\n",
    "\n",
    "gridsize = (2, 1)\n",
    "fig = plt.figure(figsize=(10,10))\n",
    "\n",
    "#Test Data\n",
    "ax1 = plt.subplot2grid(gridsize, (0,0), colspan=1, rowspan=1)\n",
    "\n",
    "#Plotting the data\n",
    "ax1.scatter(t_test[0:5],y_test[0:5],marker=\"o\",s=50,c=\"red\")\n",
    "ax1.scatter(t_test[0:5],y_test_pred[0:5],marker=\"o\",s=10,c=\"green\")\n",
    "\n",
    "#Legend\n",
    "ax1.legend(['Test Data (Predicted)', 'Predicted'], loc='best', fontsize=fontsize)\n",
    "\n",
    "#Labels\n",
    "# ax1.set_xlabel('Time (dd-mm-yyy)', fontsize=fontsize)\n",
    "ax1.set_ylabel('Peak Wind Speed (m/s)', fontsize=fontsize)\n",
    "ax1.set_title('Testing Results', fontsize=fontsize)\n",
    "ax1.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)\n",
    "ax1.tick_params(axis='y', labelsize=fontsize)\n",
    "ax1.grid(True, linestyle='--', alpha=0.5)\n",
    "\n",
    "#Train Data\n",
    "ax2 = plt.subplot2grid(gridsize, (1,0), colspan=1, rowspan=1)\n",
    "\n",
    "#Plotting the data\n",
    "ax2.scatter(t_train[0:5], y_train[0:5], marker=\"o\", s=50, c=\"blue\")\n",
    "ax2.scatter(t_train[0:5], y_train_pred[0:5], marker=\"o\", s=10, c=\"green\")\n",
    "\n",
    "#Legend\n",
    "ax2.legend(['Training Data (Actual)', 'Training Data (Predicted)'], loc='upper left', fontsize=fontsize)\n",
    "\n",
    "#Labels\n",
    "ax2.set_xlabel('Time (dd-mm-yyy)', fontsize=fontsize)\n",
    "ax2.set_ylabel('Peak Wind Speed (m/s)', fontsize=fontsize)\n",
    "ax2.set_title('Training Results', fontsize=fontsize)\n",
    "ax2.tick_params(axis='x', labelsize=fontsize, rotation=45)\n",
    "ax2.tick_params(axis='y', labelsize=fontsize)\n",
    "\n",
    "#Grid\n",
    "ax2.grid(True, linestyle='--', alpha=0.5)\n",
    "\n",
    "#Save the figure\n",
    "# plt.savefig(PNG + 'test_and_training_performance_for_one_prediction.png', dpi=300, bbox_inches='tight')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Codes: [239. 238. 263. 112. 400.  52.  62. 440. 149.  75.]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Get unique codes from X_test\n",
    "unique_codes = np.unique(X_test[:, 0])\n",
    "\n",
    "# Select 10 random codes\n",
    "random_codes = np.random.choice(unique_codes, 10, replace=False)\n",
    "print(\"Random Codes:\", random_codes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Corresponding y_test values for the given random codes: [12.8611  12.8611  12.8611  ... 38.5833  28.29442 28.29442]\n",
      "Corresponding t_test values for the given random codes: ['1988-08-21T12:00:00.000000000' '1988-08-21T18:00:00.000000000'\n",
      " '1988-08-22T00:00:00.000000000' ... '2020-07-26T00:00:00.000000000'\n",
      " '2020-07-26T06:00:00.000000000' '2020-07-26T06:00:00.000000000']\n"
     ]
    }
   ],
   "source": [
    "# Filter the test_df dataframe for the given random_codes\n",
    "filtered_test_df = test_df[test_df['Code'].isin(random_codes)]\n",
    "\n",
    "# Extract the corresponding y_test values (Vmax)\n",
    "corresponding_y_test = filtered_test_df['Vmax'].values\n",
    "corresponding_t_test = filtered_test_df['New_Times'].values\n",
    "\n",
    "print(\"Corresponding y_test values for the given random codes:\", corresponding_y_test)\n",
    "print(\"Corresponding t_test values for the given random codes:\", corresponding_t_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "vscode": {
     "languageId": "ruby"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First 5 times predicted for 10 random codes:\n",
      "Empty DataFrame\n",
      "Columns: [Code, New_Times, Vmax]\n",
      "Index: []\n",
      "\n",
      "Last 5 times predicted for 10 random codes:\n",
      "Empty DataFrame\n",
      "Columns: [Code, New_Times, Vmax]\n",
      "Index: []\n"
     ]
    }
   ],
   "source": [
    "# Filter the first and last 5 times for the random codes\n",
    "first_5_times_random = test_df[test_df['Vmax'].isin(random_codes)].groupby('Vmax').head(5)[['Code', 'New_Times', 'Vmax']]\n",
    "last_5_times_random = test_df[test_df['Vmax'].isin(random_codes)].groupby('Vmax').tail(5)[['Code', 'New_Times', 'Vmax']]\n",
    "\n",
    "# Display the results\n",
    "print(\"First 5 times predicted for 10 random codes:\")\n",
    "print(first_5_times_random)\n",
    "\n",
    "print(\"\\nLast 5 times predicted for 10 random codes:\")\n",
    "print(last_5_times_random)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "vscode": {
     "languageId": "ruby"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code</th>\n",
       "      <th>Original_Times</th>\n",
       "      <th>Times</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Vmax</th>\n",
       "      <th>MSLP</th>\n",
       "      <th>Daily_SST_Avg</th>\n",
       "      <th>Mid_Level_RH</th>\n",
       "      <th>Vshear</th>\n",
       "      <th>Vert_Vel</th>\n",
       "      <th>New_Times</th>\n",
       "      <th>Storm_Dir</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.7</td>\n",
       "      <td>87.1</td>\n",
       "      <td>10.28888</td>\n",
       "      <td>1005.0</td>\n",
       "      <td>27.1</td>\n",
       "      <td>57.0</td>\n",
       "      <td>15.227542</td>\n",
       "      <td>6.631183</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>22.2</td>\n",
       "      <td>86.5</td>\n",
       "      <td>12.86110</td>\n",
       "      <td>1004.0</td>\n",
       "      <td>27.8</td>\n",
       "      <td>53.0</td>\n",
       "      <td>15.536209</td>\n",
       "      <td>3.966363</td>\n",
       "      <td>1982-06-02 18:00:00</td>\n",
       "      <td>52.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>12.0</td>\n",
       "      <td>22.6</td>\n",
       "      <td>85.8</td>\n",
       "      <td>15.43332</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>27.9</td>\n",
       "      <td>56.0</td>\n",
       "      <td>15.330431</td>\n",
       "      <td>4.403641</td>\n",
       "      <td>1982-06-03 00:00:00</td>\n",
       "      <td>68.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.8</td>\n",
       "      <td>85.0</td>\n",
       "      <td>20.57776</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>27.2</td>\n",
       "      <td>59.0</td>\n",
       "      <td>18.622873</td>\n",
       "      <td>5.375940</td>\n",
       "      <td>1982-06-03 06:00:00</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>24.0</td>\n",
       "      <td>23.2</td>\n",
       "      <td>84.2</td>\n",
       "      <td>25.72220</td>\n",
       "      <td>995.0</td>\n",
       "      <td>26.7</td>\n",
       "      <td>53.0</td>\n",
       "      <td>17.491096</td>\n",
       "      <td>4.156708</td>\n",
       "      <td>1982-06-03 12:00:00</td>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Code       Original_Times  Times  Latitude  Longitude      Vmax    MSLP  \\\n",
       "0     0  1982-06-02 12:00:00    0.0      21.7       87.1  10.28888  1005.0   \n",
       "1     0  1982-06-02 12:00:00    6.0      22.2       86.5  12.86110  1004.0   \n",
       "2     0  1982-06-02 12:00:00   12.0      22.6       85.8  15.43332  1003.0   \n",
       "3     0  1982-06-02 12:00:00   18.0      22.8       85.0  20.57776  1001.0   \n",
       "4     0  1982-06-02 12:00:00   24.0      23.2       84.2  25.72220   995.0   \n",
       "\n",
       "   Daily_SST_Avg  Mid_Level_RH     Vshear  Vert_Vel           New_Times  \\\n",
       "0           27.1          57.0  15.227542  6.631183 1982-06-02 12:00:00   \n",
       "1           27.8          53.0  15.536209  3.966363 1982-06-02 18:00:00   \n",
       "2           27.9          56.0  15.330431  4.403641 1982-06-03 00:00:00   \n",
       "3           27.2          59.0  18.622873  5.375940 1982-06-03 06:00:00   \n",
       "4           26.7          53.0  17.491096  4.156708 1982-06-03 12:00:00   \n",
       "\n",
       "   Storm_Dir  \n",
       "0       47.0  \n",
       "1       52.0  \n",
       "2       68.0  \n",
       "3       71.0  \n",
       "4       47.0  "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cross Validation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training Cross-validation scores:  [0.87803844 0.8996507  0.91269101 0.91711912 0.92339743]\n",
      "Training Mean cross-validation score:  0.9061793413134758\n",
      "Test Cross-validation scores:  [0.83510559 0.93255986 0.89048555 0.83118627 0.87683506]\n",
      "Test Mean cross-validation score:  0.873234467620615\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# Use cross-validation to evaluate the model's performance\n",
    "cv_scores_train = cross_val_score(best_regr, X_train, y_train, cv=5, scoring='r2', n_jobs=-1)\n",
    "cv_scores_test = cross_val_score(best_regr, X_test, y_test, cv=5, scoring='r2', n_jobs=-1)\n",
    "\n",
    "# Print the cross-validation scores\n",
    "print(\"Training Cross-validation scores: \", cv_scores_train)\n",
    "print(\"Training Mean cross-validation score: \", cv_scores_train.mean())\n",
    "print(\"Test Cross-validation scores: \", cv_scores_test)\n",
    "print(\"Test Mean cross-validation score: \", cv_scores_test.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Cross Validation**\n",
    "\n",
    "Cross-validation is a technique used to evaluate the performance of a machine learning model by partitioning the data into subsets, training the model on some subsets (training set), and validating it on the remaining subsets (test set). This process is repeated multiple times to ensure that the model's performance is consistent and not dependent on a particular split of the data.\n",
    "\n",
    "```markdown\n",
    "| Metric                  | Training Set | Test Set |\n",
    "|-------------------------|--------------|----------|\n",
    "| Cross Validation        | 0.9062       | 0.8732   |\n",
    "\n",
    "```\n",
    "\n",
    "- **Training Set Cross Validation Score (0.9062)**: This indicates that the model performs well on the training data, achieving a high accuracy or performance metric.\n",
    "- **Test Set Cross Validation Score (0.8732)**: This score is slightly lower than the training set score, which is expected. It shows how well the model generalizes to unseen data.\n",
    "\n",
    "The difference between the training and test set scores suggests that the model has good generalization capabilities, but there might be a slight overfitting since the training score is higher. However, the difference is not large, indicating that the model is likely well-tuned.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bagging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training with Boostrap mean accuracy 0.9049742833245764\n",
      "Test with Boostrap mean accuracy 0.8813047572011495\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import BaggingRegressor\n",
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "bag_reg_boost = BaggingRegressor(\n",
    "    base_estimator=ExtraTreesRegressor(**best_params_int), n_estimators=100,  # n_estimators is the number of models to train\n",
    "    max_samples=1000, bootstrap=True, # bootstrap is for bagging vs pasting\n",
    "    n_jobs=-1, # number of CPU cores independently used for training and prediction. Use -1 for all available cores\n",
    "    )\n",
    "bag_reg_boost.fit(X_train, y_train)\n",
    "scores_bagg_train = cross_val_score(bag_reg_boost, X_train, y_train, cv=5)\n",
    "scores_bagg_test = cross_val_score(bag_reg_boost, X_test, y_test, cv=5)\n",
    "print('Training with Boostrap mean accuracy', scores_bagg_train.mean())\n",
    "print('Test with Boostrap mean accuracy', scores_bagg_test.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pasting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training without Boostrap mean accuracy 0.9051203698585166\n",
      "Test without Boostrap mean accuracy 0.8807877058110248\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import BaggingRegressor\n",
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "bag_reg_past = BaggingRegressor(\n",
    "    base_estimator=ExtraTreesRegressor(**best_params_int), n_estimators=100,  # n_estimators is the number of models to train\n",
    "    max_samples=1000, bootstrap=False, # bootstrap is for bagging vs pasting\n",
    "    n_jobs=-1, # number of CPU cores independently used for training and prediction. Use -1 for all available cores\n",
    "    )\n",
    "bag_reg_past.fit(X_train, y_train)\n",
    "scores_past_train = cross_val_score(bag_reg_boost, X_train, y_train, cv=5)\n",
    "scores_past_test = cross_val_score(bag_reg_boost, X_test, y_test, cv=5)\n",
    "print('Training without Boostrap mean accuracy', scores_past_train.mean())\n",
    "print('Test without Boostrap mean accuracy', scores_past_test.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Bootstrapping is a statistical method that involves repeatedly sampling with replacement from a dataset to estimate the distribution of a statistic. It is often used to improve the robustness and accuracy of models by providing a way to estimate the variability of the model's performance.\n",
    "\n",
    "In the provided results:\n",
    "\n",
    "```markdown\n",
    "| Method                | Training Mean Accuracy | Test Mean Accuracy |\n",
    "|-----------------------|------------------------|---------------------|\n",
    "| With Bootstrap        | 0.9049742833245764     | 0.8813047572011495  |\n",
    "| Without Bootstrap     | 0.9051203698585166     | 0.8807877058110248  |\n",
    "```\n",
    "\n",
    "- With Bootstrap: The model trained with bootstrapping has a training mean accuracy of approximately 0.905 and a test mean accuracy of approximately 0.881.\n",
    "\n",
    "- Without Bootstrap: The model trained without bootstrapping has a training mean accuracy of approximately 0.905 and a test mean accuracy of approximately 0.881.\n",
    "\n",
    "Summary:\n",
    "Both methods yield very similar training and test accuracies. The slight differences in accuracy suggest that bootstrapping does not significantly impact the performance of this particular model on this dataset.Bootstrapping might still be beneficial in other contexts, especially when dealing with smaller datasets or when the model's performance is highly variable. Overall, the results indicate that the choice of using bootstrapping in this scenario does not drastically change the model's accuracy.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluating Learning Curves\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.model_selection import learning_curve\n",
    "\n",
    "# Generate learning curves for bag_reg_boost\n",
    "train_sizes, train_scores, val_scores = learning_curve(\n",
    "    bag_reg_boost, X_train, y_train, cv=5, scoring='r2', n_jobs=-1, \n",
    "    train_sizes=np.linspace(0.1, 1.0, 10)\n",
    ")\n",
    "\n",
    "# Calculate mean and standard deviation for training and validation scores\n",
    "train_mean = np.mean(train_scores, axis=1)\n",
    "train_std = np.std(train_scores, axis=1)\n",
    "val_mean = np.mean(val_scores, axis=1)\n",
    "val_std = np.std(val_scores, axis=1)\n",
    "\n",
    "# Plot learning curves\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(train_sizes, train_mean, label=\"Training Accuracy\", color=\"blue\", marker='o')\n",
    "plt.plot(train_sizes, val_mean, label=\"Validation Accuracy\", color=\"red\", marker='o')\n",
    "plt.fill_between(train_sizes, train_mean - train_std, train_mean + train_std, color=\"blue\", alpha=0.1)\n",
    "plt.fill_between(train_sizes, val_mean - val_std, val_mean + val_std, color=\"red\", alpha=0.1)\n",
    "plt.xlabel(\"Training Set Size\", fontsize=14)\n",
    "plt.ylabel(\"Accuracy\", fontsize=14)\n",
    "plt.title(\"Learning Curve for Bagging Extra Tree Regressor (Bagging)\", fontsize=14)\n",
    "plt.legend(loc=\"best\", fontsize=14)\n",
    "plt.xticks(fontsize=14)\n",
    "plt.yticks(fontsize=14)\n",
    "plt.grid()\n",
    "\n",
    "#Save the figure\n",
    "plt.savefig(PNG + 'learning_curve_intensity_model.png', dpi=300, bbox_inches='tight')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Learning Curve Results\n",
    "\n",
    "The learning curve results provide insights into the model's performance as the training set size increases. Here are the key observations:\n",
    "\n",
    "- **Training Accuracy**: The training accuracy starts high and slightly decreases as the training set size increases. This is expected as the model is exposed to more data and learns to generalize better.\n",
    "\n",
    "- **Validation Accuracy**: The validation accuracy starts lower than the training accuracy but increases steadily as the training set size increases. This indicates that the model's performance on unseen data improves with more training data.\n",
    "\n",
    "- **Convergence**: Both training and validation accuracies converge as the training set size approaches the maximum. This suggests that the model is well-tuned and not overfitting.\n",
    "\n",
    "- **Standard Deviation**: The shaded areas representing the standard deviation are relatively small, indicating consistent performance across different training sizes.\n",
    "\n",
    "Overall, the learning curves show that the model performs well and generalizes effectively with increasing training data.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "\n",
    "# Initialize lists to store accuracies for each round\n",
    "train_accuracies = []\n",
    "test_accuracies = []\n",
    "n_estimators = 100  # Number of bagging rounds to evaluate\n",
    "\n",
    "# Loop over each round of bagging, increasing the number of estimators each time\n",
    "for i in range(1, n_estimators + 1):\n",
    "    # Define the Bagging Random Forest model with increasing number of estimators\n",
    "    bag_reg_boost = BaggingRegressor(\n",
    "        base_estimator=ExtraTreesRegressor(), n_estimators=i,  # n_estimators is the number of models to train\n",
    "        max_samples=1000, bootstrap=False, # bootstrap is for bagging vs pasting\n",
    "        n_jobs=-1, # number of CPU cores independently used for training and prediction. Use -1 for all available cores\n",
    "    )\n",
    "    \n",
    "    # Fit the model on the training data\n",
    "    bag_reg_boost.fit(X_train, y_train)\n",
    "    \n",
    "    # Calculate R^2 score for training and test sets\n",
    "    train_accuracy = r2_score(y_train, bag_reg_boost.predict(X_train))\n",
    "    test_accuracy = r2_score(y_test, bag_reg_boost.predict(X_test))\n",
    "    \n",
    "    # Store the accuracies\n",
    "    train_accuracies.append(train_accuracy)\n",
    "    test_accuracies.append(test_accuracy)\n",
    "\n",
    "# Plot Training and Test Accuracy Across Training Rounds\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(range(1, n_estimators + 1), train_accuracies, label=\"Training Accuracy\", marker='o', color=\"blue\")\n",
    "plt.plot(range(1, n_estimators + 1), test_accuracies, label=\"Test Accuracy\", marker='o', color=\"red\")\n",
    "plt.xlabel(\"Number of Estimators (Rounds)\", fontsize=14)\n",
    "plt.ylabel(\"Accuracy\", fontsize=14)\n",
    "plt.title(\"Training and Test Accuracy Across Bagging Rounds for Random Forest\", fontsize=14)\n",
    "plt.legend(loc=\"best\", fontsize=14)\n",
    "plt.xticks(fontsize=14)\n",
    "plt.yticks(fontsize=14)\n",
    "plt.grid()\n",
    "\n",
    "#Save the figure\n",
    "plt.savefig(PNG + 'training_and_test_accuracy_across_bagging_rounds_intensity_model.png', dpi=300, bbox_inches='tight')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Summary of Plot Results\n",
    "\n",
    "The plot above visualizes the training and test accuracies across different bagging rounds for the Random Forest model. Here are the key observations:\n",
    "\n",
    "- **Training Accuracy**: The training accuracy starts high and remains consistently high across all bagging rounds. This indicates that the model fits the training data well.\n",
    "\n",
    "- **Test Accuracy**: The test accuracy is slightly lower than the training accuracy but remains relatively stable across the bagging rounds. This suggests that the model generalizes well to unseen data.\n",
    "\n",
    "- **Convergence**: Both training and test accuracies converge as the number of bagging rounds increases, indicating that the model's performance stabilizes with more estimators.\n",
    "\n",
    "- **Overfitting**: The small difference between training and test accuracies suggests that the model is not overfitting significantly.\n",
    "\n",
    "Overall, the results indicate that the Bagging Random Forest model performs well on both training and test datasets, with stable and high accuracies across different bagging rounds.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Track Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Original_Times</th>\n",
       "      <th>Times</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Vmax</th>\n",
       "      <th>MSLP</th>\n",
       "      <th>Daily_SST_Avg</th>\n",
       "      <th>Mid_Level_RH</th>\n",
       "      <th>Vshear</th>\n",
       "      <th>Vert_Vel</th>\n",
       "      <th>New_Times</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.7</td>\n",
       "      <td>87.1</td>\n",
       "      <td>10.28888</td>\n",
       "      <td>1005.0</td>\n",
       "      <td>27.1</td>\n",
       "      <td>57.0</td>\n",
       "      <td>15.227542</td>\n",
       "      <td>6.631183</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>22.2</td>\n",
       "      <td>86.5</td>\n",
       "      <td>12.86110</td>\n",
       "      <td>1004.0</td>\n",
       "      <td>27.8</td>\n",
       "      <td>53.0</td>\n",
       "      <td>15.536209</td>\n",
       "      <td>3.966363</td>\n",
       "      <td>1982-06-02 18:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>12.0</td>\n",
       "      <td>22.6</td>\n",
       "      <td>85.8</td>\n",
       "      <td>15.43332</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>27.9</td>\n",
       "      <td>56.0</td>\n",
       "      <td>15.330431</td>\n",
       "      <td>4.403641</td>\n",
       "      <td>1982-06-03 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.8</td>\n",
       "      <td>85.0</td>\n",
       "      <td>20.57776</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>27.2</td>\n",
       "      <td>59.0</td>\n",
       "      <td>18.622873</td>\n",
       "      <td>5.375940</td>\n",
       "      <td>1982-06-03 06:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AL011982</th>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>24.0</td>\n",
       "      <td>23.2</td>\n",
       "      <td>84.2</td>\n",
       "      <td>25.72220</td>\n",
       "      <td>995.0</td>\n",
       "      <td>26.7</td>\n",
       "      <td>53.0</td>\n",
       "      <td>17.491096</td>\n",
       "      <td>4.156708</td>\n",
       "      <td>1982-06-03 12:00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Original_Times  Times  Latitude  Longitude      Vmax    MSLP  \\\n",
       "Code                                                                          \n",
       "AL011982  1982-06-02 12:00:00    0.0      21.7       87.1  10.28888  1005.0   \n",
       "AL011982  1982-06-02 12:00:00    6.0      22.2       86.5  12.86110  1004.0   \n",
       "AL011982  1982-06-02 12:00:00   12.0      22.6       85.8  15.43332  1003.0   \n",
       "AL011982  1982-06-02 12:00:00   18.0      22.8       85.0  20.57776  1001.0   \n",
       "AL011982  1982-06-02 12:00:00   24.0      23.2       84.2  25.72220   995.0   \n",
       "\n",
       "          Daily_SST_Avg  Mid_Level_RH     Vshear  Vert_Vel           New_Times  \n",
       "Code                                                                            \n",
       "AL011982           27.1          57.0  15.227542  6.631183 1982-06-02 12:00:00  \n",
       "AL011982           27.8          53.0  15.536209  3.966363 1982-06-02 18:00:00  \n",
       "AL011982           27.9          56.0  15.330431  4.403641 1982-06-03 00:00:00  \n",
       "AL011982           27.2          59.0  18.622873  5.375940 1982-06-03 06:00:00  \n",
       "AL011982           26.7          53.0  17.491096  4.156708 1982-06-03 12:00:00  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tracks = df_SHIPS_24_common_clean.copy()\n",
    "df_tracks.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Encoding Code\n",
    "\n",
    "Each storm is assigned a code based on the basin where it occurs, name and year when it happened. The code is represented as a string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code</th>\n",
       "      <th>Original_Times</th>\n",
       "      <th>Times</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Vmax</th>\n",
       "      <th>MSLP</th>\n",
       "      <th>Daily_SST_Avg</th>\n",
       "      <th>Mid_Level_RH</th>\n",
       "      <th>Vshear</th>\n",
       "      <th>Vert_Vel</th>\n",
       "      <th>New_Times</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21.7</td>\n",
       "      <td>87.1</td>\n",
       "      <td>10.28888</td>\n",
       "      <td>1005.0</td>\n",
       "      <td>27.1</td>\n",
       "      <td>57.0</td>\n",
       "      <td>15.227542</td>\n",
       "      <td>6.631183</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>22.2</td>\n",
       "      <td>86.5</td>\n",
       "      <td>12.86110</td>\n",
       "      <td>1004.0</td>\n",
       "      <td>27.8</td>\n",
       "      <td>53.0</td>\n",
       "      <td>15.536209</td>\n",
       "      <td>3.966363</td>\n",
       "      <td>1982-06-02 18:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>12.0</td>\n",
       "      <td>22.6</td>\n",
       "      <td>85.8</td>\n",
       "      <td>15.43332</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>27.9</td>\n",
       "      <td>56.0</td>\n",
       "      <td>15.330431</td>\n",
       "      <td>4.403641</td>\n",
       "      <td>1982-06-03 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.8</td>\n",
       "      <td>85.0</td>\n",
       "      <td>20.57776</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>27.2</td>\n",
       "      <td>59.0</td>\n",
       "      <td>18.622873</td>\n",
       "      <td>5.375940</td>\n",
       "      <td>1982-06-03 06:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1982-06-02 12:00:00</td>\n",
       "      <td>24.0</td>\n",
       "      <td>23.2</td>\n",
       "      <td>84.2</td>\n",
       "      <td>25.72220</td>\n",
       "      <td>995.0</td>\n",
       "      <td>26.7</td>\n",
       "      <td>53.0</td>\n",
       "      <td>17.491096</td>\n",
       "      <td>4.156708</td>\n",
       "      <td>1982-06-03 12:00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Code       Original_Times  Times  Latitude  Longitude      Vmax    MSLP  \\\n",
       "0     0  1982-06-02 12:00:00    0.0      21.7       87.1  10.28888  1005.0   \n",
       "1     0  1982-06-02 12:00:00    6.0      22.2       86.5  12.86110  1004.0   \n",
       "2     0  1982-06-02 12:00:00   12.0      22.6       85.8  15.43332  1003.0   \n",
       "3     0  1982-06-02 12:00:00   18.0      22.8       85.0  20.57776  1001.0   \n",
       "4     0  1982-06-02 12:00:00   24.0      23.2       84.2  25.72220   995.0   \n",
       "\n",
       "   Daily_SST_Avg  Mid_Level_RH     Vshear  Vert_Vel           New_Times  \n",
       "0           27.1          57.0  15.227542  6.631183 1982-06-02 12:00:00  \n",
       "1           27.8          53.0  15.536209  3.966363 1982-06-02 18:00:00  \n",
       "2           27.9          56.0  15.330431  4.403641 1982-06-03 00:00:00  \n",
       "3           27.2          59.0  18.622873  5.375940 1982-06-03 06:00:00  \n",
       "4           26.7          53.0  17.491096  4.156708 1982-06-03 12:00:00  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "\n",
    "df_tracks_clean = df_tracks.reset_index()\n",
    "df_tracks_clean['Code'] = LabelEncoder().fit(df_tracks_clean['Code']).transform(df_tracks_clean['Code']) # Extract the TC_codes\n",
    "df_tracks_clean.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding storm direction to the dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code</th>\n",
       "      <th>Original_Times</th>\n",
       "      <th>Times</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Vmax</th>\n",
       "      <th>MSLP</th>\n",
       "      <th>Daily_SST_Avg</th>\n",
       "      <th>Mid_Level_RH</th>\n",
       "      <th>Vshear</th>\n",
       "      <th>Vert_Vel</th>\n",
       "      <th>New_Times</th>\n",
       "      <th>Storm_Dir</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>83318</th>\n",
       "      <td>485</td>\n",
       "      <td>2022-11-11 00:00:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>31.2</td>\n",
       "      <td>84.6</td>\n",
       "      <td>15.43332</td>\n",
       "      <td>996.0</td>\n",
       "      <td>22.9</td>\n",
       "      <td>56.0</td>\n",
       "      <td>14.507321</td>\n",
       "      <td>0.853977</td>\n",
       "      <td>2022-11-11 06:00:00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83319</th>\n",
       "      <td>485</td>\n",
       "      <td>2022-11-11 00:00:00</td>\n",
       "      <td>12.0</td>\n",
       "      <td>33.2</td>\n",
       "      <td>84.6</td>\n",
       "      <td>12.86110</td>\n",
       "      <td>999.0</td>\n",
       "      <td>22.7</td>\n",
       "      <td>59.0</td>\n",
       "      <td>16.770874</td>\n",
       "      <td>0.751088</td>\n",
       "      <td>2022-11-11 12:00:00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83320</th>\n",
       "      <td>485</td>\n",
       "      <td>2022-11-11 06:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>31.2</td>\n",
       "      <td>84.6</td>\n",
       "      <td>15.43332</td>\n",
       "      <td>996.0</td>\n",
       "      <td>22.9</td>\n",
       "      <td>56.0</td>\n",
       "      <td>14.507321</td>\n",
       "      <td>0.853977</td>\n",
       "      <td>2022-11-11 06:00:00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83321</th>\n",
       "      <td>485</td>\n",
       "      <td>2022-11-11 06:00:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>33.2</td>\n",
       "      <td>84.6</td>\n",
       "      <td>12.86110</td>\n",
       "      <td>999.0</td>\n",
       "      <td>22.7</td>\n",
       "      <td>59.0</td>\n",
       "      <td>16.770874</td>\n",
       "      <td>0.751088</td>\n",
       "      <td>2022-11-11 12:00:00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83322</th>\n",
       "      <td>485</td>\n",
       "      <td>2022-11-11 12:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>33.2</td>\n",
       "      <td>84.6</td>\n",
       "      <td>12.86110</td>\n",
       "      <td>999.0</td>\n",
       "      <td>22.7</td>\n",
       "      <td>59.0</td>\n",
       "      <td>16.770874</td>\n",
       "      <td>0.751088</td>\n",
       "      <td>2022-11-11 12:00:00</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Code       Original_Times  Times  Latitude  Longitude      Vmax   MSLP  \\\n",
       "83318   485  2022-11-11 00:00:00    6.0      31.2       84.6  15.43332  996.0   \n",
       "83319   485  2022-11-11 00:00:00   12.0      33.2       84.6  12.86110  999.0   \n",
       "83320   485  2022-11-11 06:00:00    0.0      31.2       84.6  15.43332  996.0   \n",
       "83321   485  2022-11-11 06:00:00    6.0      33.2       84.6  12.86110  999.0   \n",
       "83322   485  2022-11-11 12:00:00    0.0      33.2       84.6  12.86110  999.0   \n",
       "\n",
       "       Daily_SST_Avg  Mid_Level_RH     Vshear  Vert_Vel           New_Times  \\\n",
       "83318           22.9          56.0  14.507321  0.853977 2022-11-11 06:00:00   \n",
       "83319           22.7          59.0  16.770874  0.751088 2022-11-11 12:00:00   \n",
       "83320           22.9          56.0  14.507321  0.853977 2022-11-11 06:00:00   \n",
       "83321           22.7          59.0  16.770874  0.751088 2022-11-11 12:00:00   \n",
       "83322           22.7          59.0  16.770874  0.751088 2022-11-11 12:00:00   \n",
       "\n",
       "       Storm_Dir  \n",
       "83318        NaN  \n",
       "83319        NaN  \n",
       "83320        NaN  \n",
       "83321        NaN  \n",
       "83322        NaN  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Merge df_tracks_clean with df_BT_24_common on the respective times\n",
    "df_tracks_clean = pd.merge(df_tracks_clean, df_BT_24_common[['ISO_TIME', 'STORM_DIR']], left_on='New_Times', right_on='ISO_TIME', how='left')\n",
    "\n",
    "# Rename the STORM_DIR column to Storm_Dir\n",
    "df_tracks_clean.rename(columns={'STORM_DIR': 'Storm_Dir'}, inplace=True)\n",
    "\n",
    "# Drop the ISO_TIME column as it is no longer needed\n",
    "df_tracks_clean.drop(columns=['ISO_TIME'], inplace=True)\n",
    "\n",
    "# Display the updated dataframe\n",
    "df_tracks_clean.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Removing nans"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(55406, 13)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_tracks_clean = df_tracks_clean.dropna()\n",
    "df_tracks_clean.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Splitting the Data into Training and Test\n",
    "\n",
    "We perform this split in a manner which maintains the codes across each both data sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_df shape: (42951, 13)\n",
      "test_df shape: (12455, 13)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Split the data into training and test sets while ensuring the 'Code' column is consistent across the split\n",
    "train_codes, test_codes = train_test_split(df_tracks_clean['Code'].unique(), test_size=0.2, random_state=42)\n",
    "\n",
    "# Create training and test sets based on the split codes\n",
    "train_df = df_tracks_clean[df_tracks_clean['Code'].isin(train_codes)]\n",
    "test_df = df_tracks_clean[df_tracks_clean['Code'].isin(test_codes)]\n",
    "\n",
    "# Print the shapes of the resulting DataFrames\n",
    "print(f\"train_df shape: {train_df.shape}\")\n",
    "print(f\"test_df shape: {test_df.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Code</th>\n",
       "      <th>Original_Times</th>\n",
       "      <th>Times</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Vmax</th>\n",
       "      <th>MSLP</th>\n",
       "      <th>Daily_SST_Avg</th>\n",
       "      <th>Mid_Level_RH</th>\n",
       "      <th>Vshear</th>\n",
       "      <th>Vert_Vel</th>\n",
       "      <th>New_Times</th>\n",
       "      <th>Storm_Dir</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>59</td>\n",
       "      <td>1982-08-28 12:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.7</td>\n",
       "      <td>22.2</td>\n",
       "      <td>15.43332</td>\n",
       "      <td>1008.0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>75.0</td>\n",
       "      <td>11.420657</td>\n",
       "      <td>4.521963</td>\n",
       "      <td>1982-08-28 12:00:00</td>\n",
       "      <td>296.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>59</td>\n",
       "      <td>1982-08-28 12:00:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>13.9</td>\n",
       "      <td>22.7</td>\n",
       "      <td>18.00554</td>\n",
       "      <td>1006.0</td>\n",
       "      <td>26.8</td>\n",
       "      <td>76.0</td>\n",
       "      <td>10.957657</td>\n",
       "      <td>4.203007</td>\n",
       "      <td>1982-08-28 18:00:00</td>\n",
       "      <td>285.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>59</td>\n",
       "      <td>1982-08-28 12:00:00</td>\n",
       "      <td>12.0</td>\n",
       "      <td>14.1</td>\n",
       "      <td>23.6</td>\n",
       "      <td>18.00554</td>\n",
       "      <td>1005.0</td>\n",
       "      <td>27.9</td>\n",
       "      <td>75.0</td>\n",
       "      <td>10.854768</td>\n",
       "      <td>4.007519</td>\n",
       "      <td>1982-08-29 00:00:00</td>\n",
       "      <td>285.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>59</td>\n",
       "      <td>1982-08-28 12:00:00</td>\n",
       "      <td>18.0</td>\n",
       "      <td>14.5</td>\n",
       "      <td>24.9</td>\n",
       "      <td>20.57776</td>\n",
       "      <td>1003.0</td>\n",
       "      <td>26.4</td>\n",
       "      <td>74.0</td>\n",
       "      <td>11.060546</td>\n",
       "      <td>3.950930</td>\n",
       "      <td>1982-08-29 06:00:00</td>\n",
       "      <td>287.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>91</th>\n",
       "      <td>59</td>\n",
       "      <td>1982-08-28 12:00:00</td>\n",
       "      <td>24.0</td>\n",
       "      <td>14.9</td>\n",
       "      <td>26.3</td>\n",
       "      <td>23.14998</td>\n",
       "      <td>1002.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>72.0</td>\n",
       "      <td>9.620103</td>\n",
       "      <td>3.333597</td>\n",
       "      <td>1982-08-29 12:00:00</td>\n",
       "      <td>286.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83225</th>\n",
       "      <td>470</td>\n",
       "      <td>2022-11-03 00:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38.0</td>\n",
       "      <td>46.4</td>\n",
       "      <td>38.58330</td>\n",
       "      <td>970.0</td>\n",
       "      <td>23.9</td>\n",
       "      <td>60.0</td>\n",
       "      <td>22.378314</td>\n",
       "      <td>7.269094</td>\n",
       "      <td>2022-11-03 00:00:00</td>\n",
       "      <td>44.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83226</th>\n",
       "      <td>470</td>\n",
       "      <td>2022-11-03 00:00:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>40.3</td>\n",
       "      <td>43.6</td>\n",
       "      <td>38.58330</td>\n",
       "      <td>965.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>27.625643</td>\n",
       "      <td>5.350218</td>\n",
       "      <td>2022-11-03 06:00:00</td>\n",
       "      <td>282.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83227</th>\n",
       "      <td>470</td>\n",
       "      <td>2022-11-03 00:00:00</td>\n",
       "      <td>6.0</td>\n",
       "      <td>40.3</td>\n",
       "      <td>43.6</td>\n",
       "      <td>38.58330</td>\n",
       "      <td>965.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>27.625643</td>\n",
       "      <td>5.350218</td>\n",
       "      <td>2022-11-03 06:00:00</td>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83228</th>\n",
       "      <td>470</td>\n",
       "      <td>2022-11-03 06:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.3</td>\n",
       "      <td>43.6</td>\n",
       "      <td>38.58330</td>\n",
       "      <td>965.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>27.625643</td>\n",
       "      <td>5.350218</td>\n",
       "      <td>2022-11-03 06:00:00</td>\n",
       "      <td>282.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>83229</th>\n",
       "      <td>470</td>\n",
       "      <td>2022-11-03 06:00:00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.3</td>\n",
       "      <td>43.6</td>\n",
       "      <td>38.58330</td>\n",
       "      <td>965.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>27.625643</td>\n",
       "      <td>5.350218</td>\n",
       "      <td>2022-11-03 06:00:00</td>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>42951 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Code       Original_Times  Times  Latitude  Longitude      Vmax  \\\n",
       "87       59  1982-08-28 12:00:00    0.0      13.7       22.2  15.43332   \n",
       "88       59  1982-08-28 12:00:00    6.0      13.9       22.7  18.00554   \n",
       "89       59  1982-08-28 12:00:00   12.0      14.1       23.6  18.00554   \n",
       "90       59  1982-08-28 12:00:00   18.0      14.5       24.9  20.57776   \n",
       "91       59  1982-08-28 12:00:00   24.0      14.9       26.3  23.14998   \n",
       "...     ...                  ...    ...       ...        ...       ...   \n",
       "83225   470  2022-11-03 00:00:00    0.0      38.0       46.4  38.58330   \n",
       "83226   470  2022-11-03 00:00:00    6.0      40.3       43.6  38.58330   \n",
       "83227   470  2022-11-03 00:00:00    6.0      40.3       43.6  38.58330   \n",
       "83228   470  2022-11-03 06:00:00    0.0      40.3       43.6  38.58330   \n",
       "83229   470  2022-11-03 06:00:00    0.0      40.3       43.6  38.58330   \n",
       "\n",
       "         MSLP  Daily_SST_Avg  Mid_Level_RH     Vshear  Vert_Vel  \\\n",
       "87     1008.0           26.6          75.0  11.420657  4.521963   \n",
       "88     1006.0           26.8          76.0  10.957657  4.203007   \n",
       "89     1005.0           27.9          75.0  10.854768  4.007519   \n",
       "90     1003.0           26.4          74.0  11.060546  3.950930   \n",
       "91     1002.0           26.0          72.0   9.620103  3.333597   \n",
       "...       ...            ...           ...        ...       ...   \n",
       "83225   970.0           23.9          60.0  22.378314  7.269094   \n",
       "83226   965.0           22.0          56.0  27.625643  5.350218   \n",
       "83227   965.0           22.0          56.0  27.625643  5.350218   \n",
       "83228   965.0           22.0          56.0  27.625643  5.350218   \n",
       "83229   965.0           22.0          56.0  27.625643  5.350218   \n",
       "\n",
       "                New_Times  Storm_Dir  \n",
       "87    1982-08-28 12:00:00      296.0  \n",
       "88    1982-08-28 18:00:00      285.0  \n",
       "89    1982-08-29 00:00:00      285.0  \n",
       "90    1982-08-29 06:00:00      287.0  \n",
       "91    1982-08-29 12:00:00      286.0  \n",
       "...                   ...        ...  \n",
       "83225 2022-11-03 00:00:00       44.0  \n",
       "83226 2022-11-03 06:00:00      282.0  \n",
       "83227 2022-11-03 06:00:00       47.0  \n",
       "83228 2022-11-03 06:00:00      282.0  \n",
       "83229 2022-11-03 06:00:00       47.0  \n",
       "\n",
       "[42951 rows x 13 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Specifying Data which the Model should use"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Train data\n",
    "X_train = np.array(train_df.drop(columns=['Vmax', 'Original_Times', 'New_Times', 'MSLP', 'Latitude', 'Longitude'])).astype(float)\n",
    "lon_train = -1 * np.array(train_df['Longitude']).astype(float)\n",
    "lat_train = np.array(train_df['Latitude']).astype(float)\n",
    "y_train = np.column_stack((lat_train, lon_train))\n",
    "\n",
    "#Test data\n",
    "X_test = np.array(test_df.drop(columns=['Vmax', 'Original_Times', 'New_Times', 'MSLP', 'Latitude', 'Longitude'])).astype(float)\n",
    "lon_test = -1 * np.array(test_df['Longitude']).astype(float)\n",
    "lat_test = np.array(test_df['Latitude']).astype(float)\n",
    "y_test = np.column_stack((lat_test, lon_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualizing the Training and Test Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from helpers import *\n",
    "# Set the projection\n",
    "crs = ccrs.PlateCarree()\n",
    "\n",
    "#Track Domain\n",
    "min_lat_track = 0\n",
    "max_lat_track = 50\n",
    "min_lon_track = -100\n",
    "max_lon_track = -10\n",
    "\n",
    "#Set Plot Area\n",
    "plot_area_track = [max_lon_track + 360.0, min_lon_track + 360.0, min_lat_track,max_lat_track]\n",
    "\n",
    "gridsize = (1, 1)\n",
    "fig = plt.figure(figsize=(10,4))\n",
    "\n",
    "ax1 = plt.subplot2grid(gridsize, (0,0), colspan=1, rowspan=1, projection=crs)\n",
    "\n",
    "ax1.scatter(y_train[:,1],y_train[:,0],marker=\"o\",s=6,c=\"blue\", zorder=100)\n",
    "ax1.scatter(y_test[:,1],y_test[:,0],marker=\"o\",s=6,c=\"red\")\n",
    "\n",
    "Cartopy_Features(ax1, 12, plot_area_track, 4, 4, 'k')\n",
    "\n",
    "ax1.legend(['Training Data', 'Test Data'], loc='lower left')\n",
    "\n",
    "plt.savefig(PNG + 'train_test_split_track_model.png', dpi=300, bbox_inches='tight',\n",
    "            facecolor='w',)\n",
    "\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training and Testing the Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Testing a number of models first"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                           Model  Training MSE    Test MSE  Training R^2  \\\n",
      "0       Random Forest (Latitude)  7.528904e-02   40.245169      0.998963   \n",
      "1      Random Forest (Longitude)  7.579737e-01  255.522899      0.998092   \n",
      "2   Gradient Boosting (Latitude)  2.504124e+01   34.442188      0.655222   \n",
      "3  Gradient Boosting (Longitude)  1.331027e+02  200.200426      0.664944   \n",
      "4         Extra Trees (Latitude)  1.258003e-27   36.032847      1.000000   \n",
      "5        Extra Trees (Longitude)  5.308375e-09  216.225999      1.000000   \n",
      "\n",
      "   Test R^2  \n",
      "0  0.341714  \n",
      "1  0.379374  \n",
      "2  0.436633  \n",
      "3  0.513744  \n",
      "4  0.410614  \n",
      "5  0.474820  \n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression, Ridge, Lasso\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "import pandas as pd\n",
    "\n",
    "# Define the models to be tested\n",
    "models = {\n",
    "    'Random Forest': RandomForestRegressor(),\n",
    "    'Gradient Boosting': GradientBoostingRegressor(),\n",
    "    'Extra Trees': ExtraTreesRegressor()\n",
    "}\n",
    "\n",
    "# Initialize a list to store the results\n",
    "results = []\n",
    "\n",
    "# Loop through each model, train it, and evaluate its performance\n",
    "for name, model in models.items():\n",
    "    # Train the model for latitude\n",
    "    model.fit(X_train, y_train[:, 0])\n",
    "    \n",
    "    # Predict on the training and test sets for latitude\n",
    "    y_train_pred_lat = model.predict(X_train)\n",
    "    y_test_pred_lat = model.predict(X_test)\n",
    "    \n",
    "    # Calculate performance metrics for latitude\n",
    "    train_mse_lat = mean_squared_error(y_train[:, 0], y_train_pred_lat)\n",
    "    test_mse_lat = mean_squared_error(y_test[:, 0], y_test_pred_lat)\n",
    "    train_r2_lat = r2_score(y_train[:, 0], y_train_pred_lat)\n",
    "    test_r2_lat = r2_score(y_test[:, 0], y_test_pred_lat)\n",
    "    \n",
    "    # Train the model for longitude\n",
    "    model.fit(X_train, y_train[:, 1])\n",
    "    \n",
    "    # Predict on the training and test sets for longitude\n",
    "    y_train_pred_lon = model.predict(X_train)\n",
    "    y_test_pred_lon = model.predict(X_test)\n",
    "    \n",
    "    # Calculate performance metrics for longitude\n",
    "    train_mse_lon = mean_squared_error(y_train[:, 1], y_train_pred_lon)\n",
    "    test_mse_lon = mean_squared_error(y_test[:, 1], y_test_pred_lon)\n",
    "    train_r2_lon = r2_score(y_train[:, 1], y_train_pred_lon)\n",
    "    test_r2_lon = r2_score(y_test[:, 1], y_test_pred_lon)\n",
    "    \n",
    "    # Store the results for latitude\n",
    "    results.append({\n",
    "        'Model': name + ' (Latitude)',\n",
    "        'Training MSE': train_mse_lat,\n",
    "        'Test MSE': test_mse_lat,\n",
    "        'Training R^2': train_r2_lat,\n",
    "        'Test R^2': test_r2_lat\n",
    "    })\n",
    "    \n",
    "    # Store the results for longitude\n",
    "    results.append({\n",
    "        'Model': name + ' (Longitude)',\n",
    "        'Training MSE': train_mse_lon,\n",
    "        'Test MSE': test_mse_lon,\n",
    "        'Training R^2': train_r2_lon,\n",
    "        'Test R^2': test_r2_lon\n",
    "    })\n",
    "\n",
    "# Convert the results to a DataFrame and print it\n",
    "results_df = pd.DataFrame(results)\n",
    "print(results_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/orca/adaley17/anaconda3/envs/waves/lib/python3.8/site-packages/sklearn/ensemble/_forest.py:416: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set: Coefficient of determination (R^2):  1.0\n",
      "MSE (mean square error) on training set: 0.00\n",
      "Coefficient of determination on training set: 1.00\n",
      "Test set: Coefficient of determination (R^2):  0.4470627157341409\n",
      "MSE (mean square error) on test set: 126.64\n",
      "Coefficient of determination on test set: 0.45\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "\n",
    "# Initialize the model with the best parameters found earlier\n",
    "best_params_et = {\n",
    "\t'n_estimators': 100,\n",
    "\t'max_features': 'auto',\n",
    "\t'max_depth': None,\n",
    "\t'min_samples_split': 2,\n",
    "\t'min_samples_leaf': 1\n",
    "}\n",
    "best_regr = ExtraTreesRegressor(**best_params_et)\n",
    "\n",
    "# Train the model with the training data\n",
    "best_regr.fit(X_train, y_train)\n",
    "\n",
    "# Predict and evaluate on the training data\n",
    "y_train_pred = best_regr.predict(X_train)\n",
    "y_test_pred = best_regr.predict(X_test)\n",
    "\n",
    "# Print the evaluation metrics\n",
    "print('Training set: Coefficient of determination (R^2): ', best_regr.score(X_train, y_train))\n",
    "print('MSE (mean square error) on training set: %.2f' % mean_squared_error(y_train, y_train_pred))\n",
    "print('Coefficient of determination on training set: %.2f' % r2_score(y_train, y_train_pred))\n",
    "\n",
    "print('Test set: Coefficient of determination (R^2): ', best_regr.score(X_test, y_test))\n",
    "print('MSE (mean square error) on test set: %.2f' % mean_squared_error(y_test, y_test_pred))\n",
    "print('Coefficient of determination on test set: %.2f' % r2_score(y_test, y_test_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize the Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from helpers import *\n",
    "# Set the projection\n",
    "crs = ccrs.PlateCarree()\n",
    "\n",
    "#Track Domain\n",
    "min_lat_track = 0\n",
    "max_lat_track = 50\n",
    "min_lon_track = -100\n",
    "max_lon_track = -10\n",
    "\n",
    "#Set Plot Area\n",
    "plot_area_track = [max_lon_track + 360.0, min_lon_track + 360.0, min_lat_track,max_lat_track]\n",
    "\n",
    "gridsize = (2, 1)\n",
    "fig = plt.figure(figsize=(10,8))\n",
    "\n",
    "ax1 = plt.subplot2grid(gridsize, (0,0), colspan=1, rowspan=1, projection=crs)\n",
    "\n",
    "# First subplot for training data\n",
    "ax1.scatter(y_train[6:12][:,1], y_train[6:12][:,0], color='blue', s=100, label='Actual')\n",
    "ax1.scatter(-1 * train_df['Longitude'][6:12], train_df['Latitude'][6:12], color='green', s=50, label='Original')\n",
    "ax1.scatter(y_train_pred[6:12][:,1], y_train_pred[6:12][:,0], color='red', s=10, label='Predicted')\n",
    "ax1.set_title('Training Data')\n",
    "ax1.set_xlabel('Longitude')\n",
    "ax1.set_ylabel('Latitude')\n",
    "Cartopy_Features(ax1, 12, plot_area_track, 4, 4, 'k')\n",
    "ax1.legend(loc='best')\n",
    "\n",
    "ax2 = plt.subplot2grid(gridsize, (1,0), colspan=1, rowspan=1, projection=crs)\n",
    "# Second subplot for test data\n",
    "ax2.scatter(y_test[6:12][:,1], y_test[6:12][:,0], color='blue', s=100, label='Actual')\n",
    "ax2.scatter(-1 * test_df['Longitude'][6:12], test_df['Latitude'][6:12], color='green', s=50, label='Original')\n",
    "ax2.scatter(y_test_pred[6:12][:,1], y_test_pred[6:12][:,0], color='red', s=25, label='Predicted')\n",
    "ax2.set_title('Test Data')\n",
    "ax2.set_xlabel('Longitude')\n",
    "ax2.set_ylabel('Latitude')\n",
    "Cartopy_Features(ax2, 12, plot_area_track, 4, 4, 'k')\n",
    "ax2.legend(loc='best')\n",
    "\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.savefig(PNG + 'training_and_test_performance_for_one_prediction_track.png', dpi=300, bbox_inches='tight'\n",
    "            , facecolor='w')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cross Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-validation scores:  [0.52251649 0.50959065 0.48718555 0.5072868  0.49376893]\n",
      "Mean cross-validation score:  0.5040696850069392\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# Use cross-validation to evaluate the model's performance\n",
    "cv_scores = cross_val_score(best_regr, X_train, y_train, cv=5, scoring='r2', n_jobs=-1)\n",
    "\n",
    "# Print the cross-validation scores\n",
    "print(\"Cross-validation scores: \", cv_scores)\n",
    "print(\"Mean cross-validation score: \", cv_scores.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross-validation scores:  [0.41143926 0.38784491 0.23685685 0.44965352 0.27605287]\n",
      "Mean cross-validation score:  0.3523694811663086\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# Use cross-validation to evaluate the model's performance\n",
    "cv_scores_test = cross_val_score(best_regr, X_test, y_test, cv=5, scoring='r2', n_jobs=-1)\n",
    "\n",
    "# Print the cross-validation scores\n",
    "print(\"Cross-validation scores: \", cv_scores_test)\n",
    "print(\"Mean cross-validation score: \", cv_scores_test.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bagging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean accuracy 0.5231236810461084\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import BaggingRegressor\n",
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# Define the best parameters for ExtraTreesRegressor\n",
    "best_params_et = {\n",
    "    'n_estimators': 100,\n",
    "    'max_features': 'auto',\n",
    "    'max_depth': None,\n",
    "    'min_samples_split': 2,\n",
    "    'min_samples_leaf': 1\n",
    "}\n",
    "\n",
    "bag_reg_boost = BaggingRegressor(\n",
    "    base_estimator=ExtraTreesRegressor(**best_params_et), n_estimators=100,  # n_estimators is the number of models to train\n",
    "    max_samples=1000, bootstrap=True, # bootstrap is for bagging vs pasting\n",
    "    n_jobs=-1, # number of CPU cores independently used for training and prediction. Use -1 for all available cores\n",
    "    )\n",
    "bag_reg_boost.fit(X_train, y_train)\n",
    "scores_bagg = cross_val_score(bag_reg_boost, X_train, y_train, cv=5)\n",
    "print('mean accuracy', scores_bagg.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pasting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean accuracy 0.5221658558333658\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import BaggingRegressor\n",
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# Define the best parameters for ExtraTreesRegressor\n",
    "best_params_et = {\n",
    "    'n_estimators': 100,\n",
    "    'max_features': 'auto',\n",
    "    'max_depth': None,\n",
    "    'min_samples_split': 2,\n",
    "    'min_samples_leaf': 1\n",
    "}\n",
    "\n",
    "bag_reg_past = BaggingRegressor(\n",
    "    base_estimator=ExtraTreesRegressor(**best_params_et), n_estimators=100,  # n_estimators is the number of models to train\n",
    "    max_samples=1000, bootstrap=False, # bootstrap is for bagging vs pasting\n",
    "    n_jobs=-1, # number of CPU cores independently used for training and prediction. Use -1 for all available cores\n",
    "    )\n",
    "bag_reg_past.fit(X_train, y_train)\n",
    "scores_past = cross_val_score(bag_reg_boost, X_train, y_train, cv=5)\n",
    "print('mean accuracy', scores_past.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluating Learning Curves\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.model_selection import learning_curve\n",
    "\n",
    "# Generate learning curves for bag_reg_boost\n",
    "train_sizes, train_scores, val_scores = learning_curve(\n",
    "    bag_reg_boost, X_train, y_train, cv=5, scoring='r2', n_jobs=-1, \n",
    "    train_sizes=np.linspace(0.1, 1.0, 10)\n",
    ")\n",
    "\n",
    "# Calculate mean and standard deviation for training and validation scores\n",
    "train_mean = np.mean(train_scores, axis=1)\n",
    "train_std = np.std(train_scores, axis=1)\n",
    "val_mean = np.mean(val_scores, axis=1)\n",
    "val_std = np.std(val_scores, axis=1)\n",
    "\n",
    "# Plot learning curves\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(train_sizes, train_mean, label=\"Training Accuracy\", color=\"blue\", marker='o')\n",
    "plt.plot(train_sizes, val_mean, label=\"Validation Accuracy\", color=\"red\", marker='o')\n",
    "plt.fill_between(train_sizes, train_mean - train_std, train_mean + train_std, color=\"blue\", alpha=0.1)\n",
    "plt.fill_between(train_sizes, val_mean - val_std, val_mean + val_std, color=\"red\", alpha=0.1)\n",
    "plt.xlabel(\"Training Set Size\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.title(\"Learning Curve for Bagging Extra Tree Regressor (Bagging)\")\n",
    "plt.legend(loc=\"best\")\n",
    "plt.grid()\n",
    "\n",
    "plt.savefig(PNG + 'learning_curve_track_model.png', dpi=300, bbox_inches='tight',\n",
    "            facecolor='w')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Learning Curve Results\n",
    "\n",
    "The learning curve results provide insights into the model's performance as the training set size increases. Here are the key observations:\n",
    "\n",
    "- **Training Accuracy**: The training accuracy starts high and slightly decreases as the training set size increases. This is expected as the model is exposed to more data and learns to generalize better.\n",
    "\n",
    "- **Validation Accuracy**: The validation accuracy starts lower than the training accuracy but increases steadily as the training set size increases. This indicates that the model's performance on unseen data improves with more training data.\n",
    "\n",
    "- **Convergence**: Both training and validation accuracies converge as the training set size approaches the maximum. This suggests that the model is well-tuned and not overfitting.\n",
    "\n",
    "- **Standard Deviation**: The shaded areas representing the standard deviation are relatively small, indicating consistent performance across different training sizes.\n",
    "\n",
    "Overall, the learning curves show that the model performs well and generalizes effectively with increasing training data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "\n",
    "# Initialize lists to store accuracies for each round\n",
    "train_accuracies = []\n",
    "test_accuracies = []\n",
    "n_estimators = 100  # Number of bagging rounds to evaluate\n",
    "\n",
    "# Loop over each round of bagging, increasing the number of estimators each time\n",
    "for i in range(1, n_estimators + 1):\n",
    "    # Define the Bagging Random Forest model with increasing number of estimators\n",
    "    bag_reg_boost = BaggingRegressor(\n",
    "        base_estimator=ExtraTreesRegressor(), n_estimators=i,  # n_estimators is the number of models to train\n",
    "        max_samples=1000, bootstrap=False, # bootstrap is for bagging vs pasting\n",
    "        n_jobs=-1, # number of CPU cores independently used for training and prediction. Use -1 for all available cores\n",
    "    )\n",
    "    \n",
    "    # Fit the model on the training data\n",
    "    bag_reg_boost.fit(X_train, y_train)\n",
    "    \n",
    "    # Calculate R^2 score for training and test sets\n",
    "    train_accuracy = r2_score(y_train, bag_reg_boost.predict(X_train))\n",
    "    test_accuracy = r2_score(y_test, bag_reg_boost.predict(X_test))\n",
    "    \n",
    "    # Store the accuracies\n",
    "    train_accuracies.append(train_accuracy)\n",
    "    test_accuracies.append(test_accuracy)\n",
    "\n",
    "# Plot Training and Test Accuracy Across Training Rounds\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(range(1, n_estimators + 1), train_accuracies, label=\"Training Accuracy\", marker='o', color=\"blue\")\n",
    "plt.plot(range(1, n_estimators + 1), test_accuracies, label=\"Test Accuracy\", marker='o', color=\"red\")\n",
    "plt.xlabel(\"Number of Estimators (Rounds)\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.title(\"Training and Test Accuracy Across Bagging Rounds for Random Forest\")\n",
    "plt.legend(loc=\"best\")\n",
    "plt.grid()\n",
    "\n",
    "plt.savefig(PNG + 'training_and_test_accuracy_across_bagging_rounds_track_model.png', dpi=300, \n",
    "            bbox_inches='tight', facecolor='w')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Trying to improve the model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating a Polynomial Feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/disk/orca/adaley17/anaconda3/envs/geo_env/lib/python3.8/site-packages/sklearn/ensemble/_forest.py:416: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n",
      "  warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best parameters found:  {'regr__n_estimators': 200, 'regr__min_samples_split': 2, 'regr__min_samples_leaf': 4, 'regr__max_features': 'auto', 'regr__max_depth': 10}\n",
      "Training set: Coefficient of determination (R^2):  0.7314570417097777\n",
      "MSE (mean square error) on training set: 58.59\n",
      "Coefficient of determination on training set: 0.73\n",
      "Test set: Coefficient of determination (R^2):  0.49235443818669045\n",
      "MSE (mean square error) on test set: 117.52\n",
      "Coefficient of determination on test set: 0.49\n"
     ]
    }
   ],
   "source": [
    "# Create polynomial features\n",
    "poly = PolynomialFeatures(degree=2, include_bias=False)\n",
    "\n",
    "# Create a pipeline with polynomial features and ExtraTreesRegressor\n",
    "pipeline = Pipeline([\n",
    "\t('poly', poly),\n",
    "\t('regr', ExtraTreesRegressor())\n",
    "])\n",
    "\n",
    "# Define the parameter grid for RandomizedSearchCV\n",
    "param_grid = {\n",
    "\t'regr__n_estimators': [50, 100, 200],\n",
    "\t'regr__max_features': ['auto', 'sqrt', 'log2'],\n",
    "\t'regr__max_depth': [None, 10, 20, 30],\n",
    "\t'regr__min_samples_split': [2, 5, 10],\n",
    "\t'regr__min_samples_leaf': [1, 2, 4]\n",
    "}\n",
    "\n",
    "# Initialize RandomizedSearchCV\n",
    "random_search = RandomizedSearchCV(estimator=pipeline, param_distributions=param_grid, n_iter=50, cv=5, n_jobs=-1, scoring='r2', random_state=42)\n",
    "\n",
    "# Fit the model\n",
    "random_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best parameters\n",
    "best_params = random_search.best_params_\n",
    "print(\"Best parameters found: \", best_params)\n",
    "\n",
    "# Train the model with the best parameters\n",
    "best_model = random_search.best_estimator_\n",
    "\n",
    "# Predict and evaluate\n",
    "y_train_pred = best_model.predict(X_train)\n",
    "y_test_pred = best_model.predict(X_test)\n",
    "\n",
    "print('Training set: Coefficient of determination (R^2): ', best_model.score(X_train, y_train))\n",
    "print('MSE (mean square error) on training set: %.2f' % mean_squared_error(y_train, y_train_pred))\n",
    "print('Coefficient of determination on training set: %.2f' % r2_score(y_train, y_train_pred))\n",
    "\n",
    "print('Test set: Coefficient of determination (R^2): ', best_model.score(X_test, y_test))\n",
    "print('MSE (mean square error) on test set: %.2f' % mean_squared_error(y_test, y_test_pred))\n",
    "print('Coefficient of determination on test set: %.2f' % r2_score(y_test, y_test_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize the results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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96/9izWYrPh6aqt9KS+99BI2m41///vfBAZAOVrCfKub+53tunbtytq1aymwe1JqFXTo0IEOHToAkJaWxueff463tzfjx4/H19eX/8yezTvvvMNXn37K6NGjycvLIzQ0tMbMGQ29aZw3YmNutsbeoNfqWNfrtbgez+tSzqmx7f4qynFNchhgbA/HNRjZpTklJd1ITk6mXbt2WCyODEGVr1GJ0czvyTmE+upqjJ1wtik2WtiSVsor43vIRTXcYTBaCKhYJaw8lslkYt68edx22220bdsWq9rk9vuqvG3sLaPwXrUKk38svr6+3H///fK+5557DoBOnToxcOBAjEYjd466ER8fH/bu2EKnTp04deoUzZo1q/W86ktj7+fr8bcNV/+8rvXnS2PbKefVMK5Z5bi+dOrUCbj4FlEZT62a2BAfdqw6VqdyDHBDyzBubh9Z53HFZRb8qghtSZIYNmyY/EYXF+LFupRsbmxbc396vV72Dc4uNmKy2mSXkJiYGCIiIkhLS2Pbtm2UlJTw8ssvM2bMGO666y4AmjRpUudcFRQUqnP33Xdz0003MWbMmD96KtcFPj4+dOvWDUBWjl32e3oQ6qvjYHpRrcoxOIL3nrqpdTUZW5XCMgsBbg6RJIm2bdvKeU/zy8x1Bj717NlTLqx0Lr+MpkEXC5bMmDGD999/n+3bt9O2bVu54EdRUZH84lCbYqygoOCewsJCRo4cyZIlS6658up/euXYSU2+055aNa/d0aHaMUaLHaPFRn5ROWq1Co3OixFtw+vMgGG3S5SZrdXGW7RoEcePH+ff//43ADqNmsxCV9/o2vy7w/w8ST1vID7EGw+NCiEE06dP5+uvv2bcuHHyA+fDDz+sdX51jXO52yljXVobZayr1+att94iJSWFjh078v3332M0Grn11luv+Pz+atR0jfokhJAU6eey32qXMFnt5BqM2O0Sdo0neq2aWztG1TmOwWjF380T7OWXX6ZPnz5yQYFgbw+OZ5eQGF6zX21logP0HMksok2UP+Co8vXMM88QERHhEtvhYlG32WDFCti3z1Hqt6JAw/X4e7tex7rW53e9jGUymZgwYQLdu3dnz549bNmyhZKSEgIDA6/4/BrCdaMc14a/3mFeqGw50Huo0XuoUds85c9bTxbQNNDLxWpQldwSEx6a6n5wAwYMICzMNYgvvaC8Qala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",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from helpers import *\n",
    "# Set the projection\n",
    "crs = ccrs.PlateCarree()\n",
    "\n",
    "#Track Domain\n",
    "min_lat_track = 0\n",
    "max_lat_track = 50\n",
    "min_lon_track = -100\n",
    "max_lon_track = -10\n",
    "\n",
    "#Set Plot Area\n",
    "plot_area_track = [max_lon_track + 360.0, min_lon_track + 360.0, min_lat_track,max_lat_track]\n",
    "\n",
    "gridsize = (1, 2)\n",
    "fig = plt.figure(figsize=(10,4))\n",
    "\n",
    "ax1 = plt.subplot2grid(gridsize, (0,0), colspan=1, rowspan=1, projection=crs)\n",
    "\n",
    "# First subplot for training data\n",
    "ax1.scatter(y_train[6:12][:,1], y_train[6:12][:,0], color='blue', s=100, label='Actual')\n",
    "ax1.scatter(-1 * train_df['Longitude'][6:12], train_df['Latitude'][6:12], color='green', s=50, label='Original')\n",
    "ax1.scatter(y_train_pred[6:12][:,1], y_train_pred[6:12][:,0], color='red', s=10, label='Predicted')\n",
    "ax1.set_title('Training Data')\n",
    "ax1.set_xlabel('Longitude')\n",
    "ax1.set_ylabel('Latitude')\n",
    "Cartopy_Features(ax1, 12, plot_area_track, 4, 4, 'k')\n",
    "ax1.legend(loc='best')\n",
    "\n",
    "ax2 = plt.subplot2grid(gridsize, (0,1), colspan=1, rowspan=1, projection=crs)\n",
    "# Second subplot for test data\n",
    "ax2.scatter(y_test[6:12][:,1], y_test[6:12][:,0], color='blue', s=100, label='Actual')\n",
    "ax2.scatter(-1 * test_df['Longitude'][6:12], test_df['Latitude'][6:12], color='green', s=50, label='Original')\n",
    "ax2.scatter(y_test_pred[6:12][:,1], y_test_pred[6:12][:,0], color='red', s=25, label='Predicted')\n",
    "ax2.set_title('Test Data')\n",
    "ax2.set_xlabel('Longitude')\n",
    "ax2.set_ylabel('Latitude')\n",
    "Cartopy_Features(ax2, 12, plot_area_track, 4, 4, 'k')\n",
    "ax2.legend(loc='best')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[97], line 27\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[38;5;66;03m# Predict and evaluate on the training data\u001b[39;00m\n\u001b[1;32m     26\u001b[0m y_train_pred \u001b[38;5;241m=\u001b[39m stacking_regressor\u001b[38;5;241m.\u001b[39mpredict(X_train)\n\u001b[0;32m---> 27\u001b[0m y_test_pred \u001b[38;5;241m=\u001b[39m \u001b[43mstacking_regressor\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_test\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     29\u001b[0m \u001b[38;5;66;03m# Print the evaluation metrics\u001b[39;00m\n\u001b[1;32m     30\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTraining set: Coefficient of determination (R^2): \u001b[39m\u001b[38;5;124m'\u001b[39m, stacking_regressor\u001b[38;5;241m.\u001b[39mscore(X_train, y_train_lat))\n",
      "File \u001b[0;32m/home/disk/orca/adaley17/anaconda3/envs/geo_env/lib/python3.8/site-packages/sklearn/ensemble/_stacking.py:351\u001b[0m, in \u001b[0;36m_BaseStacking.predict\u001b[0;34m(self, X, **predict_params)\u001b[0m\n\u001b[1;32m    330\u001b[0m \u001b[38;5;124;03m\"\"\"Predict target for X.\u001b[39;00m\n\u001b[1;32m    331\u001b[0m \n\u001b[1;32m    332\u001b[0m \u001b[38;5;124;03mParameters\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    347\u001b[0m \u001b[38;5;124;03m    Predicted targets.\u001b[39;00m\n\u001b[1;32m    348\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    350\u001b[0m check_is_fitted(\u001b[38;5;28mself\u001b[39m)\n\u001b[0;32m--> 351\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfinal_estimator_\u001b[38;5;241m.\u001b[39mpredict(\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtransform\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m)\u001b[49m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mpredict_params)\n",
      "File \u001b[0;32m/home/disk/orca/adaley17/anaconda3/envs/geo_env/lib/python3.8/site-packages/sklearn/ensemble/_stacking.py:882\u001b[0m, in \u001b[0;36mStackingRegressor.transform\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    868\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mtransform\u001b[39m(\u001b[38;5;28mself\u001b[39m, X):\n\u001b[1;32m    869\u001b[0m     \u001b[38;5;124;03m\"\"\"Return the predictions for X for each estimator.\u001b[39;00m\n\u001b[1;32m    870\u001b[0m \n\u001b[1;32m    871\u001b[0m \u001b[38;5;124;03m    Parameters\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    880\u001b[0m \u001b[38;5;124;03m        Prediction outputs for each estimator.\u001b[39;00m\n\u001b[1;32m    881\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 882\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_transform\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/home/disk/orca/adaley17/anaconda3/envs/geo_env/lib/python3.8/site-packages/sklearn/ensemble/_stacking.py:276\u001b[0m, in \u001b[0;36m_BaseStacking._transform\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    274\u001b[0m \u001b[38;5;124;03m\"\"\"Concatenate and return the predictions of the estimators.\"\"\"\u001b[39;00m\n\u001b[1;32m    275\u001b[0m check_is_fitted(\u001b[38;5;28mself\u001b[39m)\n\u001b[0;32m--> 276\u001b[0m predictions \u001b[38;5;241m=\u001b[39m [\n\u001b[1;32m    277\u001b[0m     \u001b[38;5;28mgetattr\u001b[39m(est, meth)(X)\n\u001b[1;32m    278\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m est, meth \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mestimators_, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstack_method_)\n\u001b[1;32m    279\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m est \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdrop\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    280\u001b[0m ]\n\u001b[1;32m    281\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_concatenate_predictions(X, predictions)\n",
      "File \u001b[0;32m/home/disk/orca/adaley17/anaconda3/envs/geo_env/lib/python3.8/site-packages/sklearn/ensemble/_stacking.py:277\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    274\u001b[0m \u001b[38;5;124;03m\"\"\"Concatenate and return the predictions of the estimators.\"\"\"\u001b[39;00m\n\u001b[1;32m    275\u001b[0m check_is_fitted(\u001b[38;5;28mself\u001b[39m)\n\u001b[1;32m    276\u001b[0m predictions \u001b[38;5;241m=\u001b[39m [\n\u001b[0;32m--> 277\u001b[0m     \u001b[38;5;28;43mgetattr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mest\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmeth\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    278\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m est, meth \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mestimators_, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstack_method_)\n\u001b[1;32m    279\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m est \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdrop\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    280\u001b[0m ]\n\u001b[1;32m    281\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_concatenate_predictions(X, predictions)\n",
      "File \u001b[0;32m/home/disk/orca/adaley17/anaconda3/envs/geo_env/lib/python3.8/site-packages/sklearn/ensemble/_forest.py:1004\u001b[0m, in \u001b[0;36mForestRegressor.predict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m   1002\u001b[0m \u001b[38;5;66;03m# Parallel loop\u001b[39;00m\n\u001b[1;32m   1003\u001b[0m lock \u001b[38;5;241m=\u001b[39m threading\u001b[38;5;241m.\u001b[39mLock()\n\u001b[0;32m-> 1004\u001b[0m \u001b[43mParallel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mn_jobs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mn_jobs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mverbose\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mverbose\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrequire\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43msharedmem\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1005\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdelayed\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_accumulate_prediction\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\u001b[43me\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpredict\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m[\u001b[49m\u001b[43my_hat\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlock\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1006\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43me\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mestimators_\u001b[49m\n\u001b[1;32m   1007\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1009\u001b[0m y_hat \u001b[38;5;241m/\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mestimators_)\n\u001b[1;32m   1011\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m y_hat\n",
      "File \u001b[0;32m/home/disk/orca/adaley17/anaconda3/envs/geo_env/lib/python3.8/site-packages/joblib/parallel.py:1855\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1853\u001b[0m     output \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_sequential_output(iterable)\n\u001b[1;32m   1854\u001b[0m     \u001b[38;5;28mnext\u001b[39m(output)\n\u001b[0;32m-> 1855\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m output \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mreturn_generator \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43moutput\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1857\u001b[0m \u001b[38;5;66;03m# Let's create an ID that uniquely identifies the current call. If the\u001b[39;00m\n\u001b[1;32m   1858\u001b[0m \u001b[38;5;66;03m# call is interrupted early and that the same instance is immediately\u001b[39;00m\n\u001b[1;32m   1859\u001b[0m \u001b[38;5;66;03m# re-used, this id will be used to prevent workers that were\u001b[39;00m\n\u001b[1;32m   1860\u001b[0m \u001b[38;5;66;03m# concurrently finalizing a task from the previous call to run the\u001b[39;00m\n\u001b[1;32m   1861\u001b[0m \u001b[38;5;66;03m# callback.\u001b[39;00m\n\u001b[1;32m   1862\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n",
      "File \u001b[0;32m/home/disk/orca/adaley17/anaconda3/envs/geo_env/lib/python3.8/site-packages/joblib/parallel.py:1784\u001b[0m, in \u001b[0;36mParallel._get_sequential_output\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1782\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_dispatched_batches \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m   1783\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_dispatched_tasks \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m-> 1784\u001b[0m res \u001b[38;5;241m=\u001b[39m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1785\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_completed_tasks \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m   1786\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mprint_progress()\n",
      "File \u001b[0;32m/home/disk/orca/adaley17/anaconda3/envs/geo_env/lib/python3.8/site-packages/sklearn/utils/fixes.py:117\u001b[0m, in \u001b[0;36m_FuncWrapper.__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    115\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m    116\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m config_context(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconfig):\n\u001b[0;32m--> 117\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfunction\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/home/disk/orca/adaley17/anaconda3/envs/geo_env/lib/python3.8/site-packages/sklearn/ensemble/_forest.py:664\u001b[0m, in \u001b[0;36m_accumulate_prediction\u001b[0;34m(predict, X, out, lock)\u001b[0m\n\u001b[1;32m    657\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_accumulate_prediction\u001b[39m(predict, X, out, lock):\n\u001b[1;32m    658\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    659\u001b[0m \u001b[38;5;124;03m    This is a utility function for joblib's Parallel.\u001b[39;00m\n\u001b[1;32m    660\u001b[0m \n\u001b[1;32m    661\u001b[0m \u001b[38;5;124;03m    It can't go locally in ForestClassifier or ForestRegressor, because joblib\u001b[39;00m\n\u001b[1;32m    662\u001b[0m \u001b[38;5;124;03m    complains that it cannot pickle it when placed there.\u001b[39;00m\n\u001b[1;32m    663\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 664\u001b[0m     prediction \u001b[38;5;241m=\u001b[39m \u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcheck_input\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m    665\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m lock:\n\u001b[1;32m    666\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(out) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n",
      "File \u001b[0;32m/home/disk/orca/adaley17/anaconda3/envs/geo_env/lib/python3.8/site-packages/sklearn/tree/_classes.py:506\u001b[0m, in \u001b[0;36mBaseDecisionTree.predict\u001b[0;34m(self, X, check_input)\u001b[0m\n\u001b[1;32m    504\u001b[0m check_is_fitted(\u001b[38;5;28mself\u001b[39m)\n\u001b[1;32m    505\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_X_predict(X, check_input)\n\u001b[0;32m--> 506\u001b[0m proba \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtree_\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    507\u001b[0m n_samples \u001b[38;5;241m=\u001b[39m X\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m0\u001b[39m]\n\u001b[1;32m    509\u001b[0m \u001b[38;5;66;03m# Classification\u001b[39;00m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import StackingRegressor\n",
    "from sklearn.linear_model import RidgeCV\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "\n",
    "# Define the base models\n",
    "base_models = [\n",
    "    ('et', ExtraTreesRegressor(**best_params_et)),\n",
    "    ('svr', SVR(kernel='rbf', C=100, gamma=0.1))\n",
    "]\n",
    "\n",
    "# Define the meta-model\n",
    "meta_model = RidgeCV()\n",
    "\n",
    "# Create the stacking regressor\n",
    "stacking_regressor = StackingRegressor(estimators=base_models, final_estimator=meta_model, n_jobs=-1)\n",
    "\n",
    "# Use only the latitude values as the target variable\n",
    "y_train_lat = y_train[:, 0]\n",
    "y_test_lat = y_test[:, 0]\n",
    "\n",
    "# Train the stacking regressor with the training data\n",
    "stacking_regressor.fit(X_train, y_train_lat)\n",
    "\n",
    "# Predict and evaluate on the training data\n",
    "y_train_pred = stacking_regressor.predict(X_train)\n",
    "y_test_pred = stacking_regressor.predict(X_test)\n",
    "\n",
    "# Print the evaluation metrics\n",
    "print('Training set: Coefficient of determination (R^2): ', stacking_regressor.score(X_train, y_train_lat))\n",
    "print('MSE (mean square error) on training set: %.2f' % mean_squared_error(y_train_lat, y_train_pred))\n",
    "print('Coefficient of determination on training set: %.2f' % r2_score(y_train_lat, y_train_pred))\n",
    "\n",
    "print('Test set: Coefficient of determination (R^2): ', stacking_regressor.score(X_test, y_test_lat))\n",
    "print('MSE (mean square error) on test set: %.2f' % mean_squared_error(y_test_lat, y_test_pred))\n",
    "print('Coefficient of determination on test set: %.2f' % r2_score(y_test_lat, y_test_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cross Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import BaggingRegressor\n",
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "bag_reg_pass = BaggingRegressor(\n",
    "    base_estimator=ExtraTreesRegressor(), n_estimators=100,  # n_estimators is the number of models to train\n",
    "    max_samples=1000, bootstrap=False, # bootstrap is for bagging vs pasting\n",
    "    n_jobs=-1, # number of CPU cores independently used for training and prediction. Use -1 for all available cores\n",
    "    )\n",
    "scores = cross_val_score(bag_reg_pass, data, y, cv=5)\n",
    "print('mean accuracy', scores.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 70895 data samples\n",
      "train_df shape: (56985, 12)\n",
      "test_df shape: (13910, 12)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "scaler = MinMaxScaler()\n",
    "scaler.fit_transform(track_data)# fit the model for data normalization\n",
    "newdata = scaler.transform(track_data) # transform the data. watch that data was converted to a numpy array\n",
    "\n",
    "# Split data into 50% train and 50% test subsets\n",
    "print(f\"There are {track_data.shape[0]} data samples\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "waves",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
